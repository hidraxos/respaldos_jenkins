<?xml version='1.1' encoding='UTF-8'?>
<flow-build plugin="workflow-job@1167.v8fe861b_09ef9">
  <actions>
    <org.jenkinsci.plugins.workflow.cps.replay.ReplayFlowFactoryAction plugin="workflow-cps@2648.va9433432b33c">
      <replacementLoadedScripts/>
    </org.jenkinsci.plugins.workflow.cps.replay.ReplayFlowFactoryAction>
    <hudson.model.CauseAction>
      <causeBag class="linked-hash-map">
        <entry>
          <hudson.model.Cause_-UserIdCause>
            <userId>hidraxos</userId>
          </hudson.model.Cause_-UserIdCause>
          <int>1</int>
        </entry>
        <entry>
          <org.jenkinsci.plugins.workflow.cps.replay.ReplayCause plugin="workflow-cps@2648.va9433432b33c">
            <originalNumber>51</originalNumber>
          </org.jenkinsci.plugins.workflow.cps.replay.ReplayCause>
          <int>1</int>
        </entry>
      </causeBag>
    </hudson.model.CauseAction>
    <org.jenkinsci.plugins.workflow.libs.LibrariesAction plugin="workflow-cps-global-lib@552.vd9cc05b8a2e1">
      <libraries/>
    </org.jenkinsci.plugins.workflow.libs.LibrariesAction>
  </actions>
  <queueId>669</queueId>
  <timestamp>1646189700889</timestamp>
  <startTime>1646189701451</startTime>
  <result>FAILURE</result>
  <duration>3506</duration>
  <charset>UTF-8</charset>
  <keepLog>false</keepLog>
  <execution class="org.jenkinsci.plugins.workflow.cps.CpsFlowExecution">
    <result>FAILURE</result>
    <script>import groovy.transform.Field
import groovy.json.JsonSlurper
import java.io.IOException;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.io.*;
import org.w3c.dom.*;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.ParserConfigurationException;
import groovy.json.JsonSlurper
import java.text.SimpleDateFormat;
    
@Field def ruta = &quot;&quot;
    
node{
    stage(&apos;Back_up_jobs&apos;){
        checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/master&apos;]], extensions: [], userRemoteConfigs: [[url: &apos;https://github.com/hidraxos/jobs_vencidos&apos;]]])
        def jobs = readFile(&apos;jobs.txt&apos;).readLines();
        if(!jobs.isEmpty()){
            println &quot;yes&quot;
            respaldos(jobs)
        }
    }
}
def respaldos(def jobs){
    for(i in jobs){
        println i
        if(i.contains(&apos;/&apos;)){
            def arreglo = i.tokenize(&apos;/&apos;)
            println arreglo

            if(arreglo.size() != 1){
                for(e in 0..(arreglo.size()-1)){
                    ruta = ruta + &quot;/&quot; +arreglo[e]
                    println ruta
                    if(e != (arreglo.size()-1)){
                        try{
                            sh&quot;&quot;&quot;
                                mkdir /var/jenkins_home/jobs_respaldo/${ruta}
        
                            &quot;&quot;&quot;
                        }catch(Exception errorTotal){    
                        }
                        try{
                            sh &quot;&quot;&quot;
                              cp  /var/jenkins_home/jobs${ruta}/config.xml /var/jenkins_home/jobs_respaldo${ruta}
                            &quot;&quot;&quot;
                        }catch(Exception errorTotal){
                            println &quot;el archivo config.xml ya existe&quot;
                        }
                        println ruta
                        ruta = ruta + &quot;/jobs&quot;
                        try{
                            sh&quot;&quot;&quot;
                                mkdir /var/jenkins_home/jobs_respaldo/${ruta}
                            &quot;&quot;&quot;
                        }catch(Exception errorTotal){    
                        }
                    }else{
                        try{
                            sh&quot;&quot;&quot;
                                mkdir /var/jenkins_home/jobs_respaldo/${ruta}
        
                            &quot;&quot;&quot;
                        }catch(Exception errorTotal){    
                        }
                        try{
                            sh &quot;&quot;&quot;
                              cp  /var/jenkins_home/jobs${ruta}/config.xml /var/jenkins_home/jobs_respaldo${ruta}
                            &quot;&quot;&quot;
                        }catch(Exception errorTotal){
                            println &quot;el archivo config.xml ya existe&quot;
                        }
                    }
                }
                ruta = &quot;&quot;
            }else{

            }
        }
    }
}</script>
    <loadedScripts class="map"/>
    <durabilityHint>MAX_SURVIVABILITY</durabilityHint>
    <timings class="map">
      <entry>
        <string>flowNode</string>
        <long>1508247694</long>
      </entry>
      <entry>
        <string>classLoad</string>
        <long>21147234</long>
      </entry>
      <entry>
        <string>run</string>
        <long>2244825028</long>
      </entry>
      <entry>
        <string>parse</string>
        <long>39412539</long>
      </entry>
      <entry>
        <string>saveProgram</string>
        <long>470284549</long>
      </entry>
    </timings>
    <sandbox>true</sandbox>
    <iota>12</iota>
    <head>1:12</head>
    <done>true</done>
    <resumeBlocked>false</resumeBlocked>
  </execution>
  <completed>true</completed>
  <checkouts class="hudson.util.PersistedList"/>
</flow-build>