<?xml version='1.1' encoding='UTF-8'?>
<flow-build plugin="workflow-job@1167.v8fe861b_09ef9">
  <actions>
    <hudson.model.CauseAction>
      <causeBag class="linked-hash-map">
        <entry>
          <hudson.model.Cause_-UserIdCause>
            <userId>hidraxos</userId>
          </hudson.model.Cause_-UserIdCause>
          <int>1</int>
        </entry>
      </causeBag>
    </hudson.model.CauseAction>
    <org.jenkinsci.plugins.workflow.libs.LibrariesAction plugin="workflow-cps-global-lib@564.ve62a_4eb_b_e039">
      <libraries/>
    </org.jenkinsci.plugins.workflow.libs.LibrariesAction>
    <org.jenkinsci.plugins.workflow.cps.EnvActionImpl plugin="workflow-cps@2659.v52d3de6044d0">
      <env class="tree-map"/>
    </org.jenkinsci.plugins.workflow.cps.EnvActionImpl>
  </actions>
  <queueId>210</queueId>
  <timestamp>1650396802636</timestamp>
  <startTime>1650396803096</startTime>
  <result>FAILURE</result>
  <duration>1840</duration>
  <charset>UTF-8</charset>
  <keepLog>false</keepLog>
  <execution class="org.jenkinsci.plugins.workflow.cps.CpsFlowExecution">
    <result>FAILURE</result>
    <script>import groovy.transform.Field
import java.io.*;

@Field listVersiones=[]
@Field ipNexus = &apos;http://192.168.1.110:8081&apos;
@Field credentials = &apos;nexusAdmin&apos;
@Field groupId = &apos;oracle-DB&apos;
@Field artifactId = &apos;sql-releases&apos;
@Field defaultRepository = &apos;jenkins-releases&apos;
@Field hostDB = &apos;192.168.1.110&apos;
@Field portDB = &apos;51521&apos;
@Field sidDB = &apos;XE&apos;

@Field def yellow = &quot;43&quot;; @Field def green = &quot;42&quot;; @Field def red = &apos;41&apos;; @Field def blue = &apos;46&apos;


node(&apos;master&apos;){
    labelParameters.add([$class: &apos;BooleanParameterDefinition&apos;, defaultValue: false, description: &apos;Opcional&apos;, name: &apos;Refresh_Parameters&apos;])
    labelParameters.add([$class: &apos;BooleanParameterDefinition&apos;, defaultValue: false, description: &apos;Script de backup&apos;, name: &apos;BACKUP&apos;])
    labelParameters.add([$class: &apos;BooleanParameterDefinition&apos;, defaultValue: false, description: &apos;Script de Ejecucion&apos;, name: &apos;EXECUTE&apos;])
    labelParameters.add([$class: &apos;BooleanParameterDefinition&apos;, defaultValue: false, description: &apos;Script de Reverso&apos;, name: &apos;REVERSE&apos;])
    properties(
        [parameters(
            labelParameters
        )]
    )
    stage(&apos;Git&apos;){ 
        cleanWs()
        checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/master&apos;]], extensions: [], userRemoteConfigs: [[url: &apos;https://github.com/hidraxos/jenkins_check.git&apos;]]])
        def lines = readFile(&apos;sql_prueba.txt&apos;).readLines()
        for(version in lines){
            listVersiones.add(version)
        }
    }
    stage(&apos;nexus&apos;){
        for(version in listVersiones){
            descarga(version)
        }
    }
    stage(&apos;Descomprimido&apos;){
        for(version in listVersiones){
            descomprimido(version)
        }
    }
    stage(&apos;Ejecutar&apos;){
        def folder
        def script
        for(version in listVersiones){
            if(BACKUP){
                folder = &apos;${version}/migration/${version}&apos;
                script = &apos;backup.sql&apos;
                if(fileExists(folder+&apos;/&apos;+script)){
                    SQL(folder,script)
                }else{
                    printm (&quot;No se encuentra script de backup&quot;,yellow)
                }
            }
            if(EXECUTE){
                folder = &apos;${version}/migration/${version}&apos;
                script = &apos;migration.sql&apos;
                SQL(folder,script)
            }
            if(REVERSE){
                folder = &apos;${version}/reverse&apos;
                script = &apos;reverse.sql&apos;
                SQL(folder,script)
            }
        }
    }
}
def descarga(version){
    printm (&quot;Descarga de .tar.gz Nexus&quot;,blue)
    withCredentials([usernamePassword(credentialsId: credentials, passwordVariable: &apos;PASS&apos;, usernameVariable:&apos;USERNAME&apos;)]){
        sh&quot;curl -X GET -u ${USERNAME}:${PASS} ${ipNexus}/repository/${defaultRepository}/${groupId}/${artifactId}/${version}/sql-releases-${version}.tar.gz -O&quot;
    }   
    printm (&quot;Descarga a Nexus EXITOSA&quot;,green)
}
def printm(message,color){
    ansiColor{
        println(&quot;\033[${color}m############ ${message} ############\033[0m&quot;)
    }
}
def descomprimido(version){
    sh &quot;tar -xzvf sql-releases-${version}.tar.gz&quot;
}
def SQL(folder, scriptName){
	printm(&apos;[INFO] Realizando ejecucion de: &apos;+folder+&apos;/&apos;+scriptName+&apos;&apos;,&apos;46m&apos;)
	withCredentials([usernamePassword(credentialsId: &apos;oracleDB&apos;, usernameVariable: &apos;USERNAME&apos;, passwordVariable: &apos;PASSWORD&apos;)]) {

		sh &quot;&quot;&quot;cd ${folder} &amp;&amp; sqlplus64 &apos;${USERNAME}/${PASSWORD}@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(Host=${hostDB})(Port=${portDB}))(CONNECT_DATA=(SID=${sidDB})))&apos; @${scriptName}
		&quot;&quot;&quot;
	}						
}</script>
    <loadedScripts class="map"/>
    <durabilityHint>MAX_SURVIVABILITY</durabilityHint>
    <timings class="map">
      <entry>
        <string>flowNode</string>
        <long>844529934</long>
      </entry>
      <entry>
        <string>classLoad</string>
        <long>187081894</long>
      </entry>
      <entry>
        <string>run</string>
        <long>1316343633</long>
      </entry>
      <entry>
        <string>parse</string>
        <long>210841114</long>
      </entry>
      <entry>
        <string>saveProgram</string>
        <long>275232765</long>
      </entry>
    </timings>
    <sandbox>true</sandbox>
    <iota>7</iota>
    <head>1:7</head>
    <done>true</done>
    <resumeBlocked>false</resumeBlocked>
  </execution>
  <completed>true</completed>
  <checkouts class="hudson.util.PersistedList"/>
</flow-build>