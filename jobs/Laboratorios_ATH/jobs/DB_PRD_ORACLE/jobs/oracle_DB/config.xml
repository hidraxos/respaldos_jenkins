<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1182.v60a_e6279b_579">
  <actions>
    <org.jenkinsci.plugins.workflow.multibranch.JobPropertyTrackerAction plugin="workflow-multibranch@716.vc692a_e52371b_">
      <jobPropertyDescriptors>
        <string>hudson.model.ParametersDefinitionProperty</string>
      </jobPropertyDescriptors>
    </org.jenkinsci.plugins.workflow.multibranch.JobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.BooleanParameterDefinition>
          <name>Refresh_Parameters</name>
          <description>Opcional</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>BACKUP</name>
          <description>Script de backup</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>EXECUTE</name>
          <description>Script de Ejecucion</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>REVERSE</name>
          <description>Script de Reverso</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>validarLogsPostEjecuciones</name>
          <description>多Validar logs despues de todas las ejecuciones?</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>COMMIT</name>
          <description>COMMIT GIT ${urlRepo}</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>INDEX</name>
          <description>	多script especifico o inicio de secuencia?</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>SECUENCIAL</name>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2706.v71dd22b_c5a_a_2">
    <script>import groovy.transform.Field
import java.io.*;
import java.text.SimpleDateFormat;

//Variables Nexus
@Field defaultRepository = &apos;jenkins-releases&apos;
@Field defaultExtension = &apos;zip&apos;
@Field groupId = &apos;oracle-DB&apos;
@Field credentialsNexus = &apos;nexusAdmin&apos;
@Field ipNexus = &apos;http://192.168.1.110:8081&apos;
//Variables git
@Field creditialsGit = &apos;ugithub&apos;
@Field urlRepo = &apos;https://github.com/hidraxos/jenkins_check.git&apos;
//Variables logica
@Field labelParameters = []
@Field scriptName = &quot;&quot;
@Field listaVersiones=[]
@Field BANK = &apos;mine&apos;
@Field listaLogs = []
@Field credentialsOracle
@Field def date = new Date()

@Field def yellow = &quot;43&quot;; @Field def green = &quot;42&quot;; @Field def red = &apos;41&apos;; @Field def blue = &apos;46&apos;


node(&apos;slave_sqlplus&apos;){

    labelParameters.add([$class: &apos;BooleanParameterDefinition&apos;, defaultValue: false, description: &apos;Opcional&apos;, name: &apos;Refresh_Parameters&apos;])
    labelParameters.add([$class: &apos;BooleanParameterDefinition&apos;, defaultValue: false, description: &apos;Script de backup&apos;, name: &apos;BACKUP&apos;])
    labelParameters.add([$class: &apos;BooleanParameterDefinition&apos;, defaultValue: false, description: &apos;Script de Ejecucion&apos;, name: &apos;EXECUTE&apos;])
    labelParameters.add([$class: &apos;BooleanParameterDefinition&apos;, defaultValue: false, description: &apos;Script de Reverso&apos;, name: &apos;REVERSE&apos;])
    labelParameters.add([$class: &apos;BooleanParameterDefinition&apos;, defaultValue: false, description: &apos;多Validar logs despues de todas las ejecuciones?&apos;, name: &apos;validarLogsPostEjecuciones&apos;])
	labelParameters.add(string(defaultValue: &apos;&apos;, description: &apos;COMMIT GIT ${urlRepo}&apos;, name: &apos;COMMIT&apos;, trim: false))		
	labelParameters.add(string(defaultValue: &apos;&apos;, description: &apos;	多script especifico o inicio de secuencia?&apos;, name: &apos;INDEX&apos;, trim: false))
    labelParameters.add([$class: &apos;BooleanParameterDefinition&apos;, defaultValue: false, description: &apos;&apos;, name: &apos;SECUENCIAL&apos;])
    properties(
        [parameters(
            labelParameters
        )]
    )
    stage(&apos;Git&apos;){
        if(params.&apos;Refresh_Parameters&apos;==false){
            cleanWs()
            if(params.&apos;BACKUP&apos; == false &amp;&amp; params.&apos;EXECUTE&apos; == false &amp;&amp; params.&apos;REVERSE&apos; == false){
		    	error(&quot;[ERROR] No Se selecciono componente de ejecucion.&quot;)
			}
			if(params.&apos;COMMIT&apos; == &quot;&quot;){
				error(&quot;[ERROR] No Se ingreso COMMIT de FILE GITHUB.&quot;)
			}
            checkout([$class: &apos;GitSCM&apos;, branches: [[name: params.&apos;COMMIT&apos; ]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: creditialsGit, url: urlRepo]]])
			def lines = readFile(&apos;sql_prueba.txt&apos;).readLines()
            if(params.&apos;INDEX&apos; == &quot;&quot;){
                for(VERSIONES in lines){
                    listaVersiones.add(VERSIONES)
                }
            }else if(params.&apos;INDEX&apos;!=&quot;&quot; &amp;&amp; params.&apos;SECUENCIAL&apos;==false){
                for(version in lines){
                    def (valor1, valor2, valor3) = VERSIONES.tokenize( &apos;#&apos; )
                    if(valor1 == params.&apos;INDEX&apos;){
                        listaVersiones.add(VERSIONES)
                    }
                }
            }else if(params.&apos;INDEX&apos; != &quot;&quot; &amp;&amp; params.&apos;SECUENCIAL&apos; == true){
				def contador = 1
				for(String VERSIONES in lines){
					def (valor1, valor2, valor3) = VERSIONES.tokenize( &apos;#&apos; )
					if(params.&apos;INDEX&apos; == valor1){
						contador = 2
					}
					if(contador == 2){
						listaVersiones.add(VERSIONES)
					}
				}
            }else{
                printm(&quot;No se encontro archivo de versiones en GitHub&quot;,red)
                error(&quot;File Not Found&quot;)
            }
        }else{
            printm(&quot;Refresh Parameters....&quot;,blue)
        }
    }
    stage(&apos;nexus&apos;){
        if(params.&apos;Refresh_Parameters&apos;==false){
            for(version in listaVersiones){
                def (valor1, valor2, valor3) = version.tokenize( &apos;#&apos; )
                repoFin(valor3)
                descarga(valor1 ,artifactId)
            }
        }else{
            printm(&quot;Refresh Parameters....&quot;,blue)
        }
    }
    stage(&apos;Descomprimido&apos;){
        if(params.&apos;Refresh_Parameters&apos;==false){
            for(version in listaVersiones){
                def (valor1, valor2, valor3) = version.tokenize( &apos;#&apos; )
                repoFin(valor3)
                descomprimido(valor1)
            }
        }else{
            printm(&quot;Refresh Parameters....&quot;,blue)
        }
    }
    stage(&apos;Validacione Scripts&apos;){
        if(params.&apos;Refresh_Parameters&apos;==false){
            for(def version in listaVersiones){
                def (valor1, valor2, valor3) = version.tokenize( &apos;#&apos; )
			    defineEntorno(valor2)
                if(valor2 == &quot;TX&quot;){
					scriptExecute = &apos;migrate.sql&apos;
					scriptExecuteH = &apos;reverse.sql&apos;
                    scriptExecuteB = &apos;backup.sql&apos;
                }else if(valor2 == &quot;HIST&quot;){
					scriptExecute = &apos;migrate.sql&apos;
					scriptExecuteH = &apos;reverse.sql&apos;
                    scriptExecuteB = &apos;backup.sql&apos;
				}
                if(BACKUP == &quot;true&quot;){
					finallScript = &quot;${valor1}/migration/${valor1}/${scriptExecuteB}&quot;
                    if(fileExists(finallScript)){
					    CRITICAlANALYSYS(finallScript)
                    }else{
                        printm(&quot;No se encuentra script de backup&quot;,blue)
                    }
				}
				if(EXECUTE == &quot;true&quot;){
					finallScript = &quot;${valor1}/migration/${valor1}/${scriptExecute}&quot;
					CRITICAlANALYSYS(finallScript)
				}
				if(REVERSE == &quot;true&quot;){
					finallScript = &quot;${valor1}/migration/${scriptExecuteH}&quot;
					CRITICAlANALYSYS(finallScript)
				}
            }
        }else{
            printm(&quot;Refresh Parameters....&quot;,blue)
        }
    }
    stage(&apos;Ejecutar&apos;){
        if(params.&apos;Refresh_Parameters&apos;==false){
            def folder
            def script
            for(version in listaVersiones){
                def (valor1, valor2, valor3) = version.tokenize( &apos;#&apos; )
			    defineEntorno(valor2)
                if(valor2 == &quot;TX&quot;){
					scriptExecute = &apos;migrate.sql&apos;
					scriptExecuteH = &apos;reverse.sql&apos;
                    scriptExecuteB = &apos;backup.sql&apos;
                }else if(valor2 == &quot;HIST&quot;){
					scriptExecute = &apos;migrate.sql&apos;
					scriptExecuteH = &apos;reverse.sql&apos;
                    scriptExecuteB = &apos;backup.sql&apos;
				}
                if(params.&apos;BACKUP&apos;){
                    folder = &quot;${valor1}/migration/${valor1}&quot;
                    script = scriptExecuteB
                    if(fileExists(folder+&apos;/&apos;+script)){
                        SQL(folder,script)
                        if(params.&apos;validarLogsPostEjecuciones&apos; == true){
							listaLogs.add(folder+&apos;/&apos;+scriptName)
						}
                    }else{
                        printm (&quot;No se encuentra script de backup&quot;,yellow)
                    }
                }
                if(params.&apos;EXECUTE&apos;){
                    folder = &quot;${valor1}/migration/${valor1}&quot;
                    script = scriptExecute
                    SQL(folder,script)
                    if(params.&apos;validarLogsPostEjecuciones&apos; == true){
						listaLogs.add(folder+&apos;/&apos;+scriptName)
					}
                }
                if(params.&apos;REVERSE&apos;){
                    folder = &quot;${valor1}/reverse&quot;
                    script = scriptExecuteH
                    SQL(folder,script)
                    if(params.&apos;validarLogsPostEjecuciones&apos; == true){
						listaLogs.add(folder+&apos;/&apos;+scriptName)
					}
                }
            }
            if(validarLogsPostEjecuciones == &quot;true&quot;){
				for(log in listaLogs){
					AnalisisLogs(log)
				}
			}
        }else{
            printm(&quot;Refresh Parameters....&quot;,blue)
        }
    }   
}
def descarga(version,artifactId){
    printm (&quot;Descarga de .tar.gz Nexus&quot;,blue)
    withCredentials([usernamePassword(credentialsId: credentialsNexus, passwordVariable: &apos;PASS&apos;, usernameVariable:&apos;USERNAME&apos;)]){
        sh&quot;curl -X GET -u ${USERNAME}:${PASS} ${ipNexus}/repository/${defaultRepository}/${groupId}/${artifactId}/${version}/sql-releases-${version}.tar.gz -O&quot;
    }   
    printm (&quot;Descarga a Nexus EXITOSA&quot;,green)
}
def printm(message, color){
    ansiColor(&apos;xterm&apos;){
	    def	sdf = new SimpleDateFormat(&quot;M/d/yyyy HH:mm:ss&quot;)
        println &quot;\033[${color}m************ ${message} ************ ${sdf.format(date)}\033[0m&quot;
    }
}
def descomprimido(version){
    sh &quot;tar -xzvf sql-releases-${version}.tar.gz&quot;
}
def SQL(folder, scriptName){
	printm(&apos;[INFO] Realizando ejecucion de: &apos;+folder+&apos;/&apos;+scriptName+&apos;&apos;,&apos;46m&apos;)
	withCredentials([usernamePassword(credentialsId: credentialsOracle, usernameVariable: &apos;USERNAME&apos;, passwordVariable: &apos;PASSWORD&apos;)]) {

		sh &quot;&quot;&quot;cd ${folder} &amp;&amp; sqlplus64 &apos;${USERNAME}/${PASSWORD}@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(Host=${hostDB})(Port=${portDB}))(CONNECT_DATA=(SID=${sidDB})))&apos; @${scriptName}
		&quot;&quot;&quot;
	}						
}
def defineEntorno(entorno){
    if(entorno == &quot;TX&quot;){
        hostDB = &apos;192.168.1.110&apos;
        portDB = &apos;51521&apos;
        sidDB = &apos;XE&apos;
        credentialsOracle = &apos;oracleDB&apos;
    }else{
        printm(&quot;No selecciono entorno&quot;,red)
        error(&quot;Enviroment Not Selected&quot;)
    }

}
def CRITICAlANALYSYS(script){
    printm(&quot;[INFO] Ejecutandose analisis script: ${script}&quot;,blue)
    def DICC=[&quot;DROP&quot;]
    def file = readFile(script)
    for(palabra in DICC){
        if(file.contains(palabra)){
            printm(&quot;[ERROR] Se encontro la palabra ${palabra} en el script ${script}&quot;,red)
            error(&quot;${palabra} action not allowed&quot;)
        }else{
            printm(&quot;No se enocontraron palabras reservadas&quot;,green)
        }
    }
}
def AnalisisLogs(scriptName){
	printm(&apos;[INFO] Ejecutando analisis de log generado:&apos;+scriptName+&apos;&apos;,blue)
	def (exp_version) = scriptName.substring(13).tokenize( &apos;/&apos; )
	def ERRORES = [&quot;ORA-&quot;,&quot;SP2-&quot;]
	fileResult = scriptName+&apos;.log&apos;
	def readFileResult = readFile(fileResult).trim()
	for(def palabra in ERRORES){
		if(readFileResult.contains(palabra)){
			sh &quot;tar -rvf error.log.tar ${scriptName}.log&quot;
			NOTIFICATION(&quot;error.log.tar&quot;,&quot;FAILED&quot;, exp_version)
			error(&quot;[ERROR] Genero error el script: ${scriptName}&quot;)
		}	
	}
	sh &quot;tar -rvf LOGS-DB-B&quot;+BANK+&quot;-&quot;+exp_version+&quot;.tar ${scriptName}.log&quot;
	NOTIFICATION(&quot;LOGS-DB-B&quot;+BANK+&quot;-&quot;+exp_version+&quot;.tar&quot;,&quot;SUCCESS&quot;, exp_version)
}
def NOTIFICATION(logName, resultado, VERSION){
	def BODY
	if(resultado == &quot;FAILED&quot;){
		BODY = &apos;&apos;&apos;${SCRIPT, template=&quot;groovy-html.template&quot;}&apos;&apos;&apos;
	}else{
		
		BODY = &apos;&apos;&apos;${SCRIPT, template=&quot;groovy-html.template&quot;} Logs de Ejecucion: https://devops-nexus.ath.net/service/rest/repository/browse/&apos;&apos;&apos;+defaultRepository+&apos;&apos;&apos;/LOGS-DB/B&apos;&apos;&apos;+BANK+&apos;&apos;&apos;-PRD/&apos;&apos;&apos;+VERSION+&apos;&apos;&apos;-${BUILD_NUMBER}/&apos;&apos;&apos;
	}
    emailext attachLog: true, attachmentsPattern: &quot;${logName}&quot;, body:BODY, subject: &quot;${JOB_NAME} # ${BUILD_NUMBER} # ${resultado} B&quot;+BANK+&quot;-PRD&quot;, to: &quot;hidraxosjenkins@gmail.com&quot;	
}
def repoFin(repo){
    if(repo == &quot;SOLEM&quot;){
        artifactId = &apos;sql-releases&apos;
    }else{
        printm(&quot;Solo se tiene el repo solem&quot;,blue)
        artifactId = &apos;sql-releases&apos;
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>