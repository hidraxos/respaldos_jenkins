<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1167.v8fe861b_09ef9">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2064.v5eef7d0982b_e"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2064.v5eef7d0982b_e">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>NAMES</string>
        <string>Refresh_Param</string>
        <string>Archivo</string>
        <string>File</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.bstick12.jenkinsci.plugins.leastload.LeastLoadDisabledProperty plugin="leastload@3.0.0">
      <leastLoadDisabled>false</leastLoadDisabled>
    </org.bstick12.jenkinsci.plugins.leastload.LeastLoadDisabledProperty>
    <com.synopsys.arc.jenkinsci.plugins.jobrestrictions.jobs.JobRestrictionProperty plugin="job-restrictions@0.8"/>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.ChoiceParameterDefinition>
          <name>NAMES</name>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>Herman</string>
              <string>Carlos</string>
              <string>Beatriz</string>
              <string>Gladys</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>Refresh_Param</name>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Archivo</name>
          <description>nombre del archivo .json con la info</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>File</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2659.v52d3de6044d0">
    <script>import groovy.transform.Field
import groovy.json.JsonSlurper
import java.io.IOException;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.io.*;
import org.w3c.dom.*;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.ParserConfigurationException;
import groovy.json.JsonSlurper
import java.text.SimpleDateFormat;

//Este pipeline busca integrar muchas de las funciones que podemos encontrar en Jenkins
//para esto vamos a crear un documento .txt en el workspace que suba un archivo a github, y al mismo tiempo descargue un json de ese mismo repo
//con las indicaciones para subir un artefacto a Nexus conectandose por ssh con una maquina Ubuntu

@Field def ip_ubuntu = &quot;192.168.1.110&quot;
@Field def credentials = &apos;hidraxos_credentials&apos;
@Field def texto
@Field def file = &quot;MyFile.txt&quot;
@Field def green = 42
@Field def yellow = 43
@Field def red = 41
@Field def email = &quot;hermanncho20@gmail.com&quot;
@Field def subject = [
    [name: &apos;Herman&apos;, Ciudad: &apos;Bogota&apos;, Carrera: &apos;Softeware Engineer&apos;,Dinero:5076],
    [name: &apos;Carlos&apos;, Ciudad: &apos;La paz&apos;, Carrera: &apos;Civil Engineer&apos;,Dinero: 6789],
    [name: &apos;Beatriz&apos;, Ciudad: &apos;Melborn&apos;, Carrera: &apos;Sicologist&apos;,Dinero: 9876],
    [name: &apos;Gladys&apos;, Ciudad: &apos;Miami&apos;, Carrera: &apos;Industrial engineer&apos;,dinero: 3678]
    ]
    
pipeline{
    agent any
    options{
        timeout(unit:&apos;MINUTES&apos;, time : 20)
        ansiColor(&quot;xterm&quot;)
    }
    parameters{
            choice(name: &apos;NAMES&apos;, choices: [&quot;Herman&quot;,&quot;Carlos&quot;,&quot;Beatriz&quot;,&quot;Gladys&quot;])
            booleanParam(name:&apos;Refresh_Param&apos;,description: &apos;&apos;, defaultValue: false)
            string(name:&apos;Archivo&apos;,description: &quot;nombre del archivo .json con la info&quot;)
            string(name:&apos;File&apos;,description:&apos;&apos;)
    }
    stages{
        stage(&apos;Preparation&apos;) { 
            steps{
                script{
                    cleanWs()
                    if(!params.&quot;Refresh_param&quot;){
                        colorMessage(&quot;Iniciando pipeline TODO-EN-UNO&quot;,green)
                        texto = &quot;Hello my Name is ${params.&quot;NAMES&quot;}&quot;
                        text(texto)
                        ////fecha sdf
                        // sshpass
                        // nexus
                        //github
                    }
                }
            }
        }
        stage(&apos;Cuerpo del texto&apos;){
            steps{
                script{
                    if(!params.&quot;Refresh_param&quot;){
                        for (i in subject){
                            if(i.values()[0] == params.&quot;NAMES&quot;){
                                texto = &quot;I am from ${i.values()[1]}, I am  ${i.values()[2]} y and now I have ${i.values()[3]} dollars&quot;
                                text(texto)
                            }
                        }
                    }
                }
            }
        }
        stage(&apos;Comando scp&apos;){
            steps{
                script{
                    if(!params.&apos;Refresh_param&apos;){
                        scp()
                    }
                }
            }
        }
    }
    post{
        success{
            println &quot;Todo termino SUCCESS&quot;
            //emailext (attachLog: true, body: &quot;Hola papu lo lograste&quot;, subject: &quot;Correo desde jenkins&quot;, to: email) Se necesita un cliente SMTP
        }
        failure{
            println &quot;Failure&quot;
        }
    }
}

def colorMessage(def message, def color){
    println &quot;\033[${color}m############ ${message} ############\033[0m&quot;
}
def text(def line){
    sh &quot;&quot;&quot;
        echo &quot;${line}\n&quot; &gt;&gt; ${file}
    &quot;&quot;&quot;
}
def scp(){
    withCredentials([usernamePassword(credentialsId: credentials, usernameVariable: &apos;USERNAME&apos;, passwordVariable: &apos;PASSWORD&apos;)]){
        sh &quot;&quot;&quot;
            sshpass -p ${PASSWORD} scp ${USERNAME}@${ip_ubuntu}:/home/hidraxos/Escritorio/borrar.groovy .
        &quot;&quot;&quot;
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>