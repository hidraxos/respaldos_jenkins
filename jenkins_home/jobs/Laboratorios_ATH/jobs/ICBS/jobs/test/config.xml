<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1186.v8def1a_5f3944">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2097.v33db_b_de764b_e"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2097.v33db_b_de764b_e">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>COMMIT</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>COMMIT</name>
          <description>Commit del properties.yaml</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2725.v7b_c717eb_12ce">
    <script>import groovy.transform.Field

@Field def host = &apos;192.168.1.115&apos;
@Field def credentials = &apos;hidraxos_credentials&apos;
@Field def credentialsGit = &apos;ugithub&apos;
@Field def yellow = &quot;43&quot;; @Field def green = &quot;42&quot;; @Field def red = &apos;41&apos;; @Field def blue = &apos;46&apos; ; @Field def white = &quot;47&quot;
@Field def folder = &apos;/home/hidraxos/Documents&apos;
@Field def urlRepo = &quot;https://github.com/hidraxos/jenkins_check.git&quot;

pipeline{
    agent any

    parameters { 
        string(name: &apos;COMMIT&apos;, defaultValue: &apos;&apos;, description: &apos;Commit del properties.yaml&apos;) 
    }

    stages{
        stage(&apos;Download yml&apos;) {
            steps {
                script{
                    checkout([$class: &apos;GitSCM&apos;, branches: [[name: COMMIT ]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: credentialsGit, url: urlRepo]]])
                    data = readYaml file: &quot;properties.yaml&quot;
                    println data.BAVV
                    for(def info in data.BAVV){
                        actionFile(info)
                    }
                }
            }
        }
    }
}
def printm(message,color){
    ansiColor{
        println(&quot;\033[${color}m*************** ${message} ***************\033[0m&quot;)
    }
}
def actionFile(info){
    if(info.ActionFile == &quot;Add&quot;){
        printm(&quot;Se anadira el archivo ${info.name}&quot;,white)
        withCredentials([usernamePassword(credentialsId: credentials, passwordVariable: &apos;PASS&apos;, usernameVariable:&apos;USERNAME&apos;)]){
            sh&quot;&quot;&quot;
                 sshpass -p ${PASS} scp ${info.name} ${USERNAME}@${host}:${folder}
            &quot;&quot;&quot;
            printm(&quot;Archivo ${info.name} agregado&quot;,blue)
            sh&quot;&quot;&quot;
                     sshpass -p ${PASS} ssh ${USERNAME}@${host} &quot;ls ${folder}&quot;
            &quot;&quot;&quot;
        }
    }else if(info.ActionFile == &quot;Mod&quot;){
        actionLine(info)
    }
}
def actionLine(info){
    if(info.ActionLine == &quot;Add&quot;){
        printm(&quot;Se anadira linea archivo ${info.name}&quot;,white)
        withCredentials([usernamePassword(credentialsId: credentials, passwordVariable: &apos;PASS&apos;, usernameVariable:&apos;USERNAME&apos;)]){
            sh&quot;&quot;&quot;
                 sshpass -p ${PASS} ssh ${USERNAME}@${host} &quot;echo &apos;${info.NewLine}&apos; &gt;&gt; ${folder}/${info.name}&quot;
            &quot;&quot;&quot;
            printm(&quot;Archivo ${info.name} modificado&quot;,blue)
            sh&quot;&quot;&quot;
                 sshpass -p ${PASS} ssh ${USERNAME}@${host} &quot;cat ${folder}/${info.name}&quot;
            &quot;&quot;&quot;
        }
    }else if(info.ActionLine == &quot;Elim&quot;){
        printm(&quot;Se eliminara una linea ${info.name}&quot;,white)
        withCredentials([usernamePassword(credentialsId: credentials, passwordVariable: &apos;PASS&apos;, usernameVariable:&apos;USERNAME&apos;)]){
            sh&quot;&quot;&quot;
                 sshpass -p ${PASS} ssh ${USERNAME}@${host} &quot;sed -i -e &apos;/${info.Line}/d&apos; ${folder}/${info.name}&quot;
            &quot;&quot;&quot;
            printm(&quot;Archivo ${info.name} modificado&quot;,blue)
            sh&quot;&quot;&quot;
                 sshpass -p ${PASS} ssh ${USERNAME}@${host} &quot;cat ${folder}/${info.name}&quot;
            &quot;&quot;&quot;
        }
    }else if(info.ActionLine == &quot;Mod&quot;){
        printm(&quot;Se modificara una linea ${info.name}&quot;,white)
        withCredentials([usernamePassword(credentialsId: credentials, passwordVariable: &apos;PASS&apos;, usernameVariable:&apos;USERNAME&apos;)]){
            sh&quot;&quot;&quot;
                 sshpass -p ${PASS} ssh ${USERNAME}@${host} &quot;sed -i -e &apos;s/${info.OldLine}/${info.NewLine}/&apos; ${folder}/${info.name}&quot;
            &quot;&quot;&quot;
            printm(&quot;Archivo ${info.name} modificado&quot;,blue)
            sh&quot;&quot;&quot;
                sshpass -p ${PASS} ssh ${USERNAME}@${host} &quot;cat ${folder}/${info.name}&quot;
            &quot;&quot;&quot;
        }
    }
    
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>