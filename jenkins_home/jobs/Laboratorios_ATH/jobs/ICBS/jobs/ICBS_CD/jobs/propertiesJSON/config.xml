<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1186.v8def1a_5f3944">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2097.v33db_b_de764b_e"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2097.v33db_b_de764b_e">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>Refresh_Param</string>
        <string>Release</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.BooleanParameterDefinition>
          <name>Refresh_Param</name>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Release</name>
          <description>Release que trae el properties.json</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2725.v7b_c717eb_12ce">
    <script>import groovy.transform.Field
import java.text.SimpleDateFormat;

//------Variables GitHub ----
@Field def credentialsGit = &apos;ugithub&apos;
@Field def urlRepo = &quot;https://github.com/hidraxos/jenkins_check.git&quot;

//------Variables server properties----
@Field def host = &apos;192.168.1.115&apos;
@Field def credentials = &apos;hidraxos_credentials&apos;
@Field def folder = &apos;/home/hidraxos/Documents/properties&apos;

//------Variables Nexus---------
@Field def url_nexus = &apos;http://192.168.1.115:8081&apos;
@Field def repoNexus = &apos;maven-icbs-releases&apos;
@Field def credentialsNexus = &apos;nexus_credentials&apos;
@Field def artifactIdProperties = &quot;icbs-release-json&quot;
@Field def artifactIdZip = &quot;icbs-properties-devops&quot;
@Field def groupId = &quot;com/ath/icbs&quot;


//------Variables logicas
@Field def yellow = &quot;43&quot;; @Field def green = &quot;42&quot;; @Field def red = &apos;41&apos;; @Field def blue = &apos;46&apos; ; @Field def white = &quot;47&quot;
@Field def data

pipeline{
    agent any

    parameters { 
        booleanParam(name: &apos;Refresh_Param&apos;, defaultValue: false, description: &apos;&apos;)
        string(name: &apos;Release&apos;, defaultValue: &apos;&apos;, description: &apos;Release que trae el properties.json&apos;) 
    }

    stages{
        stage(&apos;Download json&apos;) {
            steps {
                script{
                    if(!params.&quot;Refresh_Param&quot;){
                        cleanWs()
                        downloadNexus(artifactIdProperties, params.&apos;Release&apos;, &quot;json&quot;)
                        data = readJSON file: &quot;${artifactIdProperties}-${params.&apos;Release&apos;}.json&quot;
                    }else{
                        printm(&apos;Refrescando parametros&apos;,blue)
                    }
                }
            }
        }
        stage(&apos;Mod Properties&apos;){
            steps {
                script{
                    if(!params.&quot;Refresh_Param&quot;){
                        for (properties in data.Properties){
                            //println properties
                            println properties.bancos
                            if(properties.bancos.contains(&quot;BAVV&quot;)){
                                if(properties.accion_archivo == &quot;Mod&quot;){
                                    actionLine(properties)
                                }else{
                                    actionFile(properties)
                                }
                            }
                        }
                    }else{
                        printm(&quot;Refrescando parametros&quot;,blue)
                    }
                }
            }
        }
    }
}
def printm(message,color){
    ansiColor{
        println(&quot;\033[${color}m*************** ${message} ***************\033[0m&quot;)
    }
}
def actionFile(info){
    if(info.accion_archivo == &quot;New&quot;){
        printm(&quot;Se anadira el archivo ${info.nombre_archivo}&quot;,white)
        downloadNexus(artifactIdZip, info.tag, &quot;zip&quot;)
        sh&quot;unzip ${artifactIdZip}-${info.tag}.zip&quot;
        withCredentials([usernamePassword(credentialsId: credentials, passwordVariable: &apos;PASS&apos;, usernameVariable:&apos;USERNAME&apos;)]){
            sh&quot;&quot;&quot;
                sshpass -p ${PASS} scp ${info.nombre_archivo} ${USERNAME}@${host}:${folder}
            &quot;&quot;&quot;
            printm(&quot;Archivo ${info.nombre_archivo} agregado&quot;,blue)
            sh&quot;&quot;&quot;
                     sshpass -p ${PASS} ssh ${USERNAME}@${host} &quot;ls ${folder}&quot;
            &quot;&quot;&quot;
        }
    }else if(info.accion_archivo == &quot;Eli&quot;){
        backUp(info.nombre_archivo)
        printm(&quot;Se Eliminara el archivo ${info.nombre_archivo}&quot;,white)
        withCredentials([usernamePassword(credentialsId: credentials, passwordVariable: &apos;PASS&apos;, usernameVariable:&apos;USERNAME&apos;)]){
            sh&quot;&quot;&quot;
                 sshpass -p ${PASS} ssh ${USERNAME}@${host} &quot;rm -rf ${folder}/${info.nombre_archivo}&quot;
            &quot;&quot;&quot;
            printm(&quot;Archivo ${info.nombre_archivo} agregado&quot;,blue)
            sh&quot;&quot;&quot;
                     sshpass -p ${PASS} ssh ${USERNAME}@${host} &quot;ls ${folder}&quot;
            &quot;&quot;&quot;
        }
    }else{
        printm(&quot;Opcion No Valida en accion_archivo (Eli/Mod/New)&quot;,red)
        error(&quot;Invalid Option&quot;)
    }
}
def actionLine(info){
    backUp(info.nombre_archivo)
    for(modificacion in info.modificacion){
        if(modificacion.accion_linea == &quot;New&quot;){
            printm(&quot;Se anadira linea archivo ${info.nombre_archivo}&quot;,white)
            withCredentials([usernamePassword(credentialsId: credentials, passwordVariable: &apos;PASS&apos;, usernameVariable:&apos;USERNAME&apos;)]){
                sh&quot;&quot;&quot;
                     sshpass -p ${PASS} ssh ${USERNAME}@${host} &quot;echo &apos;${modificacion.propiedad}=${modificacion.valor}&apos; &gt;&gt; ${folder}/${info.nombre_archivo}&quot;
                &quot;&quot;&quot;
                printm(&quot;Archivo ${info.nombre_archivo} modificado&quot;,blue)
                sh&quot;&quot;&quot;
                     sshpass -p ${PASS} ssh ${USERNAME}@${host} &quot;cat ${folder}/${info.nombre_archivo}&quot;
                &quot;&quot;&quot;
            }
        }else if(modificacion.accion_linea == &quot;Eli&quot;){
            printm(&quot;Se eliminara una linea en ${info.nombre_archivo}&quot;,white)
            withCredentials([usernamePassword(credentialsId: credentials, passwordVariable: &apos;PASS&apos;, usernameVariable:&apos;USERNAME&apos;)]){
                sh&quot;&quot;&quot;
                     sshpass -p ${PASS} ssh ${USERNAME}@${host} &quot;sed -i -e &apos;/${modificacion.propiedad}=/d&apos; ${folder}/${info.nombre_archivo}&quot;
                &quot;&quot;&quot;
                printm(&quot;Archivo ${info.nombre_archivo} modificado&quot;,blue)
                sh&quot;&quot;&quot;
                     sshpass -p ${PASS} ssh ${USERNAME}@${host} &quot;cat ${folder}/${info.nombre_archivo}&quot;
                &quot;&quot;&quot;
            }
        }else if(modificacion.accion_linea == &quot;Mod&quot;){
            printm(&quot;Se modificara una linea ${info.nombre_archivo}&quot;,white)
            withCredentials([usernamePassword(credentialsId: credentials, passwordVariable: &apos;PASS&apos;, usernameVariable:&apos;USERNAME&apos;)]){
                sh&quot;&quot;&quot;
                     sshpass -p ${PASS} ssh ${USERNAME}@${host} &quot;sed -i -e &apos;s/${modificacion.propiedad}=[0-9a-zA-Z]*/${modificacion.propiedad}=${modificacion.valor}/&apos; ${folder}/${info.nombre_archivo}&quot;
                &quot;&quot;&quot;
                printm(&quot;Archivo ${info.nombre_archivo} modificado&quot;,blue)
                sh&quot;&quot;&quot;
                    sshpass -p ${PASS} ssh ${USERNAME}@${host} &quot;cat ${folder}/${info.nombre_archivo}&quot;
                &quot;&quot;&quot;
            }
        }
    }
}
def downloadNexus(artifact, version, ext){
    withCredentials([usernamePassword(credentialsId: credentialsNexus, passwordVariable: &apos;PASS&apos;, usernameVariable: &apos;USER&apos;)]) {
        sh&quot;curl -u $USER:$PASS -X GET ${url_nexus}/repository/${repoNexus}/${groupId}/${artifact}/${version}/${artifact}-${version}.${ext} -O&quot;
    }
}
def backUp(file){
    def date = new Date()
    def sdf = new SimpleDateFormat(&quot;dd-MM-yyyy&quot;)
    def fecha = sdf.format(date)
    withCredentials([usernamePassword(credentialsId: credentials, passwordVariable: &apos;PASS&apos;, usernameVariable:&apos;USERNAME&apos;)]){
        sh&quot;&quot;&quot;
             sshpass -p ${PASS} ssh ${USERNAME}@${host} &quot;cp ${folder}/${file} ${folder}/${file}.bk_${fecha}&quot;
        &quot;&quot;&quot;
        printm(&quot;Backup del archivo ${file} realizado&quot;,blue)
        sh&quot;&quot;&quot;
            sshpass -p ${PASS} ssh ${USERNAME}@${host} &quot;ls ${folder}&quot;
        &quot;&quot;&quot;
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>