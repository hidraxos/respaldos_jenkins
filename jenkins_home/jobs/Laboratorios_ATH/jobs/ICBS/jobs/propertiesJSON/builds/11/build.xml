<?xml version='1.1' encoding='UTF-8'?>
<flow-build plugin="workflow-job@1186.v8def1a_5f3944">
  <actions>
    <org.jenkinsci.plugins.workflow.cps.replay.ReplayFlowFactoryAction plugin="workflow-cps@2725.v7b_c717eb_12ce">
      <replacementLoadedScripts/>
    </org.jenkinsci.plugins.workflow.cps.replay.ReplayFlowFactoryAction>
    <hudson.model.CauseAction>
      <causeBag class="linked-hash-map">
        <entry>
          <hudson.model.Cause_-UserIdCause>
            <userId>hidraxos</userId>
          </hudson.model.Cause_-UserIdCause>
          <int>1</int>
        </entry>
        <entry>
          <org.jenkinsci.plugins.workflow.cps.replay.ReplayCause plugin="workflow-cps@2725.v7b_c717eb_12ce">
            <originalNumber>10</originalNumber>
          </org.jenkinsci.plugins.workflow.cps.replay.ReplayCause>
          <int>1</int>
        </entry>
      </causeBag>
    </hudson.model.CauseAction>
    <hudson.model.ParametersAction>
      <safeParameters class="sorted-set"/>
      <parameters>
        <hudson.model.StringParameterValue>
          <name>COMMIT</name>
          <description>Commit del properties.yaml</description>
          <value>b9b9083639324d3f5aba626859d6904a81717dbb</value>
        </hudson.model.StringParameterValue>
      </parameters>
      <parameterDefinitionNames>
        <string>COMMIT</string>
      </parameterDefinitionNames>
    </hudson.model.ParametersAction>
    <org.jenkinsci.plugins.workflow.libs.LibrariesAction plugin="pipeline-groovy-lib@593.va_a_fc25d520e9">
      <libraries/>
    </org.jenkinsci.plugins.workflow.libs.LibrariesAction>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.ExecutionModelAction plugin="pipeline-model-definition@2.2097.v33db_b_de764b_e">
      <stagesUUID>8ae1b972-c68d-4021-be3e-fe2e29d6e6ce</stagesUUID>
      <pipelineDefs>
        <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTPipelineDef plugin="pipeline-model-api@2.2097.v33db_b_de764b_e">
          <stages>
            <stages>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Download yml</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                        <name>script</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>scriptBlock</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                                <value class="string">checkout([$class: &apos;GitSCM&apos;, branches: [[name: COMMIT ]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: credentialsGit, url: urlRepo]]])
                    data = readJSON file: &quot;properties.json&quot;
                    for (bancos in data.Properties.bancos){
                        println bancos
                        for (banco in bancos){
                            if(banco == &quot;BAVV&quot;){
                                println data.Properties.modificacion
                            }
                        }
                    }
                    for(def info in data.BAVV){
                        actionFile(info)
                    }</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
            </stages>
            <uuid>8ae1b972-c68d-4021-be3e-fe2e29d6e6ce</uuid>
          </stages>
          <agent>
            <agentType>
              <key>any</key>
            </agentType>
          </agent>
          <parameters>
            <parameters>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBuildParameter>
                <name>string</name>
                <args>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKeyValueOrMethodCallPair>
                    <key>
                      <key>name</key>
                    </key>
                    <value class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue$ConstantValue">
                      <value class="string">COMMIT</value>
                    </value>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKeyValueOrMethodCallPair>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKeyValueOrMethodCallPair>
                    <key>
                      <key>defaultValue</key>
                    </key>
                    <value class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue$ConstantValue">
                      <value class="string"></value>
                    </value>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKeyValueOrMethodCallPair>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKeyValueOrMethodCallPair>
                    <key>
                      <key>description</key>
                    </key>
                    <value class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue$ConstantValue">
                      <value class="string">Commit del properties.yaml</value>
                    </value>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKeyValueOrMethodCallPair>
                </args>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBuildParameter>
            </parameters>
          </parameters>
        </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTPipelineDef>
      </pipelineDefs>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.ExecutionModelAction>
    <org.jenkinsci.plugins.workflow.cps.EnvActionImpl plugin="workflow-cps@2725.v7b_c717eb_12ce">
      <env class="tree-map"/>
    </org.jenkinsci.plugins.workflow.cps.EnvActionImpl>
    <com.cloudbees.plugins.credentials.builds.CredentialsParameterBinder plugin="credentials@1129.vef26f5df883c">
      <boundCredentials class="concurrent-hash-map"/>
    </com.cloudbees.plugins.credentials.builds.CredentialsParameterBinder>
    <hudson.plugins.git.util.BuildData plugin="git@4.11.3">
      <buildsByBranchName>
        <entry>
          <string>detached</string>
          <hudson.plugins.git.util.Build>
            <marked plugin="git-client@3.11.0">
              <sha1>b9b9083639324d3f5aba626859d6904a81717dbb</sha1>
              <branches class="list">
                <hudson.plugins.git.Branch>
                  <sha1 reference="../../../sha1"/>
                  <name>detached</name>
                </hudson.plugins.git.Branch>
              </branches>
            </marked>
            <revision reference="../marked"/>
            <hudsonBuildNumber>11</hudsonBuildNumber>
          </hudson.plugins.git.util.Build>
        </entry>
      </buildsByBranchName>
      <lastBuild reference="../buildsByBranchName/entry/hudson.plugins.git.util.Build"/>
      <remoteUrls>
        <string>https://github.com/hidraxos/jenkins_check.git</string>
      </remoteUrls>
    </hudson.plugins.git.util.BuildData>
    <org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState plugin="workflow-scm-step@400.v6b_89a_1317c9a_">
      <revisionStates>
        <entry>
          <string>git https://github.com/hidraxos/jenkins_check.git</string>
          <hudson.scm.SCMRevisionState_-None/>
        </entry>
      </revisionStates>
    </org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState>
  </actions>
  <queueId>190</queueId>
  <timestamp>1657673371885</timestamp>
  <startTime>1657673371889</startTime>
  <result>SUCCESS</result>
  <duration>1694</duration>
  <charset>UTF-8</charset>
  <keepLog>false</keepLog>
  <execution class="org.jenkinsci.plugins.workflow.cps.CpsFlowExecution">
    <result>SUCCESS</result>
    <script>import groovy.transform.Field

@Field def host = &apos;192.168.1.115&apos;
@Field def credentials = &apos;hidraxos_credentials&apos;
@Field def credentialsGit = &apos;ugithub&apos;
@Field def yellow = &quot;43&quot;; @Field def green = &quot;42&quot;; @Field def red = &apos;41&apos;; @Field def blue = &apos;46&apos; ; @Field def white = &quot;47&quot;
@Field def folder = &apos;/home/hidraxos/Documents&apos;
@Field def urlRepo = &quot;https://github.com/hidraxos/jenkins_check.git&quot;

pipeline{
    agent any

    parameters { 
        string(name: &apos;COMMIT&apos;, defaultValue: &apos;&apos;, description: &apos;Commit del properties.yaml&apos;) 
    }

    stages{
        stage(&apos;Download yml&apos;) {
            steps {
                script{
                    checkout([$class: &apos;GitSCM&apos;, branches: [[name: COMMIT ]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: credentialsGit, url: urlRepo]]])
                    data = readJSON file: &quot;properties.json&quot;
                    for (bancos in data.Properties.bancos){
                        println bancos
                        for (banco in bancos){
                            if(banco == &quot;BAVV&quot;){
                                println data.Properties.modificacion
                            }
                        }
                    }
                    for(def info in data.BAVV){
                        actionFile(info)
                    }
                }
            }
        }
    }
}
def printm(message,color){
    ansiColor{
        println(&quot;\033[${color}m*************** ${message} ***************\033[0m&quot;)
    }
}
def actionFile(info){
    if(info.ActionFile == &quot;Add&quot;){
        printm(&quot;Se anadira el archivo ${info.name}&quot;,white)
        withCredentials([usernamePassword(credentialsId: credentials, passwordVariable: &apos;PASS&apos;, usernameVariable:&apos;USERNAME&apos;)]){
            sh&quot;&quot;&quot;
                 sshpass -p ${PASS} scp ${info.name} ${USERNAME}@${host}:${folder}
            &quot;&quot;&quot;
            printm(&quot;Archivo ${info.name} agregado&quot;,blue)
            sh&quot;&quot;&quot;
                     sshpass -p ${PASS} ssh ${USERNAME}@${host} &quot;ls ${folder}&quot;
            &quot;&quot;&quot;
        }
    }else if(info.ActionFile == &quot;Mod&quot;){
        actionLine(info)
    }
}
def actionLine(info){
    if(info.ActionLine == &quot;Add&quot;){
        printm(&quot;Se anadira linea archivo ${info.name}&quot;,white)
        withCredentials([usernamePassword(credentialsId: credentials, passwordVariable: &apos;PASS&apos;, usernameVariable:&apos;USERNAME&apos;)]){
            sh&quot;&quot;&quot;
                 sshpass -p ${PASS} ssh ${USERNAME}@${host} &quot;echo &apos;${info.NewLine}&apos; &gt;&gt; ${folder}/${info.name}&quot;
            &quot;&quot;&quot;
            printm(&quot;Archivo ${info.name} modificado&quot;,blue)
            sh&quot;&quot;&quot;
                 sshpass -p ${PASS} ssh ${USERNAME}@${host} &quot;cat ${folder}/${info.name}&quot;
            &quot;&quot;&quot;
        }
    }else if(info.ActionLine == &quot;Elim&quot;){
        printm(&quot;Se eliminara una linea ${info.name}&quot;,white)
        withCredentials([usernamePassword(credentialsId: credentials, passwordVariable: &apos;PASS&apos;, usernameVariable:&apos;USERNAME&apos;)]){
            sh&quot;&quot;&quot;
                 sshpass -p ${PASS} ssh ${USERNAME}@${host} &quot;sed -i -e &apos;/${info.Line}/d&apos; ${folder}/${info.name}&quot;
            &quot;&quot;&quot;
            printm(&quot;Archivo ${info.name} modificado&quot;,blue)
            sh&quot;&quot;&quot;
                 sshpass -p ${PASS} ssh ${USERNAME}@${host} &quot;cat ${folder}/${info.name}&quot;
            &quot;&quot;&quot;
        }
    }else if(info.ActionLine == &quot;Mod&quot;){
        printm(&quot;Se modificara una linea ${info.name}&quot;,white)
        withCredentials([usernamePassword(credentialsId: credentials, passwordVariable: &apos;PASS&apos;, usernameVariable:&apos;USERNAME&apos;)]){
            sh&quot;&quot;&quot;
                 sshpass -p ${PASS} ssh ${USERNAME}@${host} &quot;sed -i -e &apos;s/${info.OldLine}/${info.NewLine}/&apos; ${folder}/${info.name}&quot;
            &quot;&quot;&quot;
            printm(&quot;Archivo ${info.name} modificado&quot;,blue)
            sh&quot;&quot;&quot;
                sshpass -p ${PASS} ssh ${USERNAME}@${host} &quot;cat ${folder}/${info.name}&quot;
            &quot;&quot;&quot;
        }
    }
    
}</script>
    <loadedScripts class="map"/>
    <durabilityHint>MAX_SURVIVABILITY</durabilityHint>
    <timings class="concurrent-hash-map">
      <entry>
        <string>flowNode</string>
        <long>156743257</long>
      </entry>
      <entry>
        <string>classLoad</string>
        <long>188195482</long>
      </entry>
      <entry>
        <string>run</string>
        <long>531598965</long>
      </entry>
      <entry>
        <string>parse</string>
        <long>126500130</long>
      </entry>
      <entry>
        <string>saveProgram</string>
        <long>110972236</long>
      </entry>
    </timings>
    <sandbox>true</sandbox>
    <iota>20</iota>
    <head>1:20</head>
    <done>true</done>
    <resumeBlocked>false</resumeBlocked>
  </execution>
  <completed>true</completed>
  <checkouts class="hudson.util.PersistedList">
    <org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
      <scm class="hudson.plugins.git.GitSCM" plugin="git@4.11.3">
        <configVersion>2</configVersion>
        <userRemoteConfigs>
          <hudson.plugins.git.UserRemoteConfig>
            <url>https://github.com/hidraxos/jenkins_check.git</url>
            <credentialsId>ugithub</credentialsId>
          </hudson.plugins.git.UserRemoteConfig>
        </userRemoteConfigs>
        <branches>
          <hudson.plugins.git.BranchSpec>
            <name>b9b9083639324d3f5aba626859d6904a81717dbb</name>
          </hudson.plugins.git.BranchSpec>
        </branches>
        <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
        <submoduleCfg class="empty-list"/>
        <extensions/>
      </scm>
      <node></node>
      <workspace>/var/jenkins_home/workspace/Laboratorios_ATH/ICBS/propertiesJSON</workspace>
      <changelogFile>/var/jenkins_home/jobs/Laboratorios_ATH/jobs/ICBS/jobs/propertiesJSON/builds/11/changelog14088634521010676368.xml</changelogFile>
      <pollingBaseline class="hudson.scm.SCMRevisionState$None" reference="../../../actions/org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState/revisionStates/entry/hudson.scm.SCMRevisionState_-None"/>
    </org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
  </checkouts>
</flow-build>