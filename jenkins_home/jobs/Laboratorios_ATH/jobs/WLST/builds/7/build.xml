<?xml version='1.1' encoding='UTF-8'?>
<flow-build plugin="workflow-job@1167.v8fe861b_09ef9">
  <actions>
    <hudson.model.ParametersAction>
      <safeParameters class="sorted-set"/>
      <parameters>
        <hudson.model.BooleanParameterValue>
          <name>Refresh_Parameters</name>
          <description>Opcional</description>
          <value>true</value>
        </hudson.model.BooleanParameterValue>
        <hudson.model.BooleanParameterValue>
          <name>Refresh_Parameters</name>
          <description>Opcional</description>
          <value>false</value>
        </hudson.model.BooleanParameterValue>
        <hudson.model.BooleanParameterValue>
          <name>SHUTDOWN_SERVERS</name>
          <value>false</value>
        </hudson.model.BooleanParameterValue>
        <hudson.model.BooleanParameterValue>
          <name>Undeploy_Components</name>
          <value>false</value>
        </hudson.model.BooleanParameterValue>
        <hudson.model.BooleanParameterValue>
          <name>Deploy_Components</name>
          <value>false</value>
        </hudson.model.BooleanParameterValue>
        <hudson.model.BooleanParameterValue>
          <name>START_SERVERS</name>
          <value>false</value>
        </hudson.model.BooleanParameterValue>
        <hudson.model.BooleanParameterValue>
          <name>DELETE_TMPS</name>
          <value>false</value>
        </hudson.model.BooleanParameterValue>
        <hudson.model.StringParameterValue>
          <name>war</name>
          <value>ZERO_00</value>
        </hudson.model.StringParameterValue>
      </parameters>
      <parameterDefinitionNames>
        <string>Refresh_Parameters</string>
        <string>Refresh_Parameters</string>
        <string>SHUTDOWN_SERVERS</string>
        <string>Undeploy_Components</string>
        <string>Deploy_Components</string>
        <string>START_SERVERS</string>
        <string>DELETE_TMPS</string>
        <string>war</string>
      </parameterDefinitionNames>
    </hudson.model.ParametersAction>
    <hudson.model.CauseAction>
      <causeBag class="linked-hash-map">
        <entry>
          <hudson.model.Cause_-UserIdCause>
            <userId>hidraxos</userId>
          </hudson.model.Cause_-UserIdCause>
          <int>1</int>
        </entry>
      </causeBag>
    </hudson.model.CauseAction>
    <org.jenkinsci.plugins.workflow.libs.LibrariesAction plugin="workflow-cps-global-lib@564.ve62a_4eb_b_e039">
      <libraries/>
    </org.jenkinsci.plugins.workflow.libs.LibrariesAction>
  </actions>
  <queueId>244</queueId>
  <timestamp>1651016724346</timestamp>
  <startTime>1651016724396</startTime>
  <result>SUCCESS</result>
  <duration>1612</duration>
  <charset>UTF-8</charset>
  <keepLog>false</keepLog>
  <execution class="org.jenkinsci.plugins.workflow.cps.CpsFlowExecution">
    <result>SUCCESS</result>
    <script>import groovy.transform.Field
import java.io.*;

@Field def ipNexus = &apos;http://192.168.1.110:8081&apos;
@Field def credentialsNexus = &apos;nexusAdmin&apos;
@Field def groupId = &apos;weblogic&apos;
@Field def artifactId = &apos;war&apos;
@Field def repository = &apos;jenkins-releases&apos;
@Field def host = &apos;192.168.1.110&apos;
@Field def components = [&apos;war&apos;,&apos;ear&apos;]
@Field def labelParameters = []

@Field def yellow = &quot;43&quot;; @Field def green = &quot;42&quot;; @Field def red = &apos;41&apos;; @Field def blue = &apos;46&apos;

node(&apos;master&apos;){
    labelParameters.add([$class: &apos;BooleanParameterDefinition&apos;, defaultValue: false, description: &apos;Opcional&apos;, name: &apos;Refresh_Parameters&apos;])
    labelParameters.add([$class: &apos;BooleanParameterDefinition&apos;, defaultValue: false, description: &apos;&apos;, name: &apos;Refresh_Parameters&apos;])
    labelParameters.add([$class: &apos;BooleanParameterDefinition&apos;, defaultValue: false, description: &apos;&apos;, name: &apos;SHUTDOWN_SERVERS&apos;])
    labelParameters.add([$class: &apos;BooleanParameterDefinition&apos;, defaultValue: true, description: &apos;&apos;, name: &apos;Undeploy_Components&apos;])
    labelParameters.add([$class: &apos;BooleanParameterDefinition&apos;, defaultValue: true, description: &apos;&apos;, name: &apos;Deploy_Components&apos;])
    labelParameters.add([$class: &apos;BooleanParameterDefinition&apos;, defaultValue: true, description: &apos;&apos;, name: &apos;START_SERVERS&apos;])
    labelParameters.add([$class: &apos;BooleanParameterDefinition&apos;, defaultValue: true, description: &apos;&apos;, name: &apos;DELETE_TMPS&apos;])

    for(String component in components){
            getNexusVersion(component, repository, groupId, component)
    }

    properties(
        [parameters(
            labelParameters
        )]
    )
}

def getNexusVersion(name, repository,groupId,artifactId){
	String scriptVersion = scriptGetVersionsNexus(repository,groupId,artifactId)
	labelParameters.add([$class: &apos;ChoiceParameter&apos;, choiceType: &apos;PT_SINGLE_SELECT&apos;, description: &apos;&apos; , filterLength: 1, filterable: true, name: name, randomName: name, script: [$class: &apos;GroovyScript&apos;, fallbackScript: [classpath: [], sandbox: false, script: &apos;&apos;], script: [classpath: [], sandbox: false, script: scriptVersion]]])	
	
}

String scriptGetVersionsNexus(String repository,String groupId,String artifactId){

String script =&quot;&quot;&quot;
import groovy.json.JsonSlurper
import groovy.transform.Field
import jenkins.model.*
@Field def token=&quot;&quot;
@Field def nexusResponse = [:]
def responseList = []
responseList.add(&apos;ZERO_00&apos;)
while(token!=null){
    request()
  for(int i=0; i &lt; nexusResponse.items.size();i++){
        if(nexusResponse.items[i].group.toString().equals(&apos;${groupId}&apos;)){
              responseList.add(nexusResponse.items[i].version.toString())  
             
        }
     }
        
}
    return responseList.sort()
def request(){
    if(token==&quot;&quot;){
        urlNexusArtifactory = &quot;${ipNexus}/service/rest/v1/search?sort=&amp;repository=${repository}&amp;name=${artifactId}&quot;
    }else{
        urlNexusArtifactory = &quot;${ipNexus}/service/rest/v1/search?continuationToken=&quot;+token+&quot;&amp;sort=&amp;repository=${repository}&amp;name=${artifactId}&quot;
    }
    try {
		 credentialsId = &apos;${credentialsNexus}&apos;
        def creds = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
        com.cloudbees.plugins.credentials.common.StandardUsernameCredentials.class, Jenkins.instance, null, null ).find{
        it.id == credentialsId}
        String userpass = creds.username.toString() + &apos;:&apos; + creds.password.toString();
        String basicAuth = &quot;Basic &quot; + new String(Base64.getEncoder().encode(userpass.getBytes()));
        def http_client = new URL(urlNexusArtifactory).openConnection() as HttpURLConnection
        http_client.setRequestProperty(&quot;Authorization&quot;, basicAuth);
        http_client.setRequestMethod(&quot;GET&quot;);
        http_client.connect();
	  
        if (http_client.responseCode == 200) {
            nexusResponse = new JsonSlurper().parseText(http_client.inputStream.getText(\&apos;UTF-8\&apos;))
        } else {
            println(&quot;HTTP response error&quot;)
            System.exit(0)
        }
        if(nexusResponse.continuationToken==&quot;null&quot;){
            token=&quot;null&quot;
           
        }else{
            token=nexusResponse.continuationToken
        }
    }catch (Exception e) {
        println(e)
    }
}&quot;&quot;&quot;
return script
}
</script>
    <loadedScripts class="map"/>
    <durabilityHint>MAX_SURVIVABILITY</durabilityHint>
    <timings class="map">
      <entry>
        <string>flowNode</string>
        <long>754238825</long>
      </entry>
      <entry>
        <string>classLoad</string>
        <long>8731013</long>
      </entry>
      <entry>
        <string>run</string>
        <long>1292124681</long>
      </entry>
      <entry>
        <string>parse</string>
        <long>42288152</long>
      </entry>
      <entry>
        <string>saveProgram</string>
        <long>251995409</long>
      </entry>
    </timings>
    <sandbox>true</sandbox>
    <iota>8</iota>
    <head>1:8</head>
    <done>true</done>
    <resumeBlocked>false</resumeBlocked>
  </execution>
  <completed>true</completed>
  <checkouts class="hudson.util.PersistedList"/>
</flow-build>