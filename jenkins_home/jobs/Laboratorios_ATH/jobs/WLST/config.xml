<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1167.v8fe861b_09ef9">
  <actions>
    <org.jenkinsci.plugins.workflow.multibranch.JobPropertyTrackerAction plugin="workflow-multibranch@711.vdfef37cda_816">
      <jobPropertyDescriptors>
        <string>hudson.model.ParametersDefinitionProperty</string>
      </jobPropertyDescriptors>
    </org.jenkinsci.plugins.workflow.multibranch.JobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.bstick12.jenkinsci.plugins.leastload.LeastLoadDisabledProperty plugin="leastload@3.0.0">
      <leastLoadDisabled>false</leastLoadDisabled>
    </org.bstick12.jenkinsci.plugins.leastload.LeastLoadDisabledProperty>
    <com.synopsys.arc.jenkinsci.plugins.jobrestrictions.jobs.JobRestrictionProperty plugin="job-restrictions@0.8"/>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.BooleanParameterDefinition>
          <name>Refresh_Parameters</name>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>SHUTDOWN_SERVERS</name>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>Undeploy_Components</name>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>Deploy_Components</name>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>START_SERVERS</name>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>DELETE_TMPS</name>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <org.biouno.unochoice.ChoiceParameter plugin="uno-choice@2.6.1">
          <name>war</name>
          <randomName>war</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1140.vf967fb_efa_55a_">
              <script>
import groovy.json.JsonSlurper
import groovy.transform.Field
import jenkins.model.*
@Field def token=&quot;&quot;
@Field def nexusResponse = [:]
def responseList = []
responseList.add(&apos;ZERO_00&apos;)
while(token!=null){
    request()
  for(int i=0; i &lt; nexusResponse.items.size();i++){
        if(nexusResponse.items[i].group.toString().equals(&apos;weblogic&apos;)){
              responseList.add(nexusResponse.items[i].version.toString())  
             
        }
     }
        
}
    return responseList.sort()
def request(){
    if(token==&quot;&quot;){
        urlNexusArtifactory = &quot;http://192.168.1.110:8081/service/rest/v1/search?sort=&amp;repository=jenkins-releases&amp;name=war&quot;
    }else{
        urlNexusArtifactory = &quot;http://192.168.1.110:8081/service/rest/v1/search?continuationToken=&quot;+token+&quot;&amp;sort=&amp;repository=jenkins-releases&amp;name=war&quot;
    }
    try {
		 credentialsId = &apos;nexusAdmin&apos;
        def creds = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
        com.cloudbees.plugins.credentials.common.StandardUsernameCredentials.class, Jenkins.instance, null, null ).find{
        it.id == credentialsId}
        String userpass = creds.username.toString() + &apos;:&apos; + creds.password.toString();
        String basicAuth = &quot;Basic &quot; + new String(Base64.getEncoder().encode(userpass.getBytes()));
        def http_client = new URL(urlNexusArtifactory).openConnection() as HttpURLConnection
        http_client.setRequestProperty(&quot;Authorization&quot;, basicAuth);
        http_client.setRequestMethod(&quot;GET&quot;);
        http_client.connect();
	  
        if (http_client.responseCode == 200) {
            nexusResponse = new JsonSlurper().parseText(http_client.inputStream.getText(&apos;UTF-8&apos;))
        } else {
            println(&quot;HTTP response error&quot;)
            System.exit(0)
        }
        if(nexusResponse.continuationToken==&quot;null&quot;){
            token=&quot;null&quot;
           
        }else{
            token=nexusResponse.continuationToken
        }
    }catch (Exception e) {
        println(e)
    }
}</script>
              <sandbox>false</sandbox>
              <classpath/>
            </secureScript>
            <secureFallbackScript plugin="script-security@1140.vf967fb_efa_55a_">
              <script></script>
              <sandbox>false</sandbox>
              <classpath/>
            </secureFallbackScript>
          </script>
          <choiceType>PT_SINGLE_SELECT</choiceType>
          <filterable>true</filterable>
          <filterLength>1</filterLength>
        </org.biouno.unochoice.ChoiceParameter>
        <org.biouno.unochoice.ChoiceParameter plugin="uno-choice@2.6.1">
          <name>ear</name>
          <randomName>ear</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1140.vf967fb_efa_55a_">
              <script>
import groovy.json.JsonSlurper
import groovy.transform.Field
import jenkins.model.*
@Field def token=&quot;&quot;
@Field def nexusResponse = [:]
def responseList = []
responseList.add(&apos;ZERO_00&apos;)
while(token!=null){
    request()
  for(int i=0; i &lt; nexusResponse.items.size();i++){
        if(nexusResponse.items[i].group.toString().equals(&apos;weblogic&apos;)){
              responseList.add(nexusResponse.items[i].version.toString())  
             
        }
     }
        
}
    return responseList.sort()
def request(){
    if(token==&quot;&quot;){
        urlNexusArtifactory = &quot;http://192.168.1.110:8081/service/rest/v1/search?sort=&amp;repository=jenkins-releases&amp;name=ear&quot;
    }else{
        urlNexusArtifactory = &quot;http://192.168.1.110:8081/service/rest/v1/search?continuationToken=&quot;+token+&quot;&amp;sort=&amp;repository=jenkins-releases&amp;name=ear&quot;
    }
    try {
		 credentialsId = &apos;nexusAdmin&apos;
        def creds = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
        com.cloudbees.plugins.credentials.common.StandardUsernameCredentials.class, Jenkins.instance, null, null ).find{
        it.id == credentialsId}
        String userpass = creds.username.toString() + &apos;:&apos; + creds.password.toString();
        String basicAuth = &quot;Basic &quot; + new String(Base64.getEncoder().encode(userpass.getBytes()));
        def http_client = new URL(urlNexusArtifactory).openConnection() as HttpURLConnection
        http_client.setRequestProperty(&quot;Authorization&quot;, basicAuth);
        http_client.setRequestMethod(&quot;GET&quot;);
        http_client.connect();
	  
        if (http_client.responseCode == 200) {
            nexusResponse = new JsonSlurper().parseText(http_client.inputStream.getText(&apos;UTF-8&apos;))
        } else {
            println(&quot;HTTP response error&quot;)
            System.exit(0)
        }
        if(nexusResponse.continuationToken==&quot;null&quot;){
            token=&quot;null&quot;
           
        }else{
            token=nexusResponse.continuationToken
        }
    }catch (Exception e) {
        println(e)
    }
}</script>
              <sandbox>false</sandbox>
              <classpath/>
            </secureScript>
            <secureFallbackScript plugin="script-security@1140.vf967fb_efa_55a_">
              <script></script>
              <sandbox>false</sandbox>
              <classpath/>
            </secureFallbackScript>
          </script>
          <choiceType>PT_SINGLE_SELECT</choiceType>
          <filterable>true</filterable>
          <filterLength>1</filterLength>
        </org.biouno.unochoice.ChoiceParameter>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2659.v52d3de6044d0">
    <script>import groovy.transform.Field
import java.io.*;

@Field def ipNexus = &apos;http://192.168.1.110:8081&apos;
@Field def credentialsNexus = &apos;nexusAdmin&apos;
@Field def groupId = &apos;weblogic&apos;
@Field def artifactId
@Field def repository = &apos;jenkins-releases&apos;
@Field def host = &apos;192.168.1.110&apos;
@Field def ext
@Field def credentials = &apos;hidraxos_credentials&apos;


@Field def components = [
                            &apos;war&apos;:[&apos;server1&apos;,&apos;war&apos;],
                            &apos;ear&apos;:[&apos;server2&apos;,&apos;ear&apos;]
                        ]

@Field def labelParameters = []

@Field def yellow = &quot;43&quot;; @Field def green = &quot;42&quot;; @Field def red = &apos;41&apos;; @Field def blue = &apos;46&apos;

node(&apos;master&apos;){
    labelParameters.add([$class: &apos;BooleanParameterDefinition&apos;, defaultValue: false, description: &apos;&apos;, name: &apos;Refresh_Parameters&apos;])
    labelParameters.add([$class: &apos;BooleanParameterDefinition&apos;, defaultValue: false, description: &apos;&apos;, name: &apos;SHUTDOWN_SERVERS&apos;])
    labelParameters.add([$class: &apos;BooleanParameterDefinition&apos;, defaultValue: true, description: &apos;&apos;, name: &apos;Undeploy_Components&apos;])
    labelParameters.add([$class: &apos;BooleanParameterDefinition&apos;, defaultValue: true, description: &apos;&apos;, name: &apos;Deploy_Components&apos;])
    labelParameters.add([$class: &apos;BooleanParameterDefinition&apos;, defaultValue: true, description: &apos;&apos;, name: &apos;START_SERVERS&apos;])
    labelParameters.add([$class: &apos;BooleanParameterDefinition&apos;, defaultValue: true, description: &apos;&apos;, name: &apos;DELETE_TMPS&apos;])

    for(String component in components.keySet()){
            getNexusVersion(component, repository, groupId, component)
    }

    properties(
        [parameters(
            labelParameters
        )]
    )
    stage(&apos;Download Artifacts Nexus&apos;) {
        cleanWs()
        if(Refresh_Parameters == &quot;false&quot;){
		    withCredentials([usernamePassword(credentialsId: credentialsNexus, passwordVariable: &apos;PASS&apos;, usernameVariable: &apos;USER&apos;)]) {
		    	for(component in components.keySet()){
		    		if(params.&quot;$component&quot; != &apos;ZERO_00&apos;){
                        artifactId = component
                        ext = components.get(component)[1]
		    			downloadsComponents(artifactId, params.&quot;$component&quot;, ext)
		    		}
		    	}
            }
        }else{
            println &quot;Refrescando parametros!!&quot;
        }
    }
    stage(&apos;create Script&apos;){
        sh&quot;&quot;&quot;
            touch script.py &amp;&amp; echo &quot;connect(&apos;weblogic&apos;,&apos;galvis0425&apos;,&apos;${host}:7001&apos;)&quot; &gt;&gt; script.py &amp;&amp; echo &quot;edit()&quot; &gt;&gt; script.py &amp;&amp; echo &quot;startEdit()&quot; &gt;&gt; script.py
        &quot;&quot;&quot;
        if(params.&apos;Deploy_Components&apos;){
		    for(component in components.keySet()){
		    	if(params.&quot;$component&quot; != &apos;ZERO_00&apos;){
                    artifactId = component
                    ext = components.get(component)[1]
                    servers = components.get(component)[0]
                    deploy(params.&quot;$component&quot;,artifactId, servers, ext)
                }
            }
        }
        sh&quot;&quot;&quot;
            echo &quot;save()&quot; &gt;&gt; script.py &amp;&amp; echo &quot;activate()&quot; &gt;&gt; script.py
        &quot;&quot;&quot;
    }
    stage(&apos;Ejecutar Script&apos;){
        execute()
    }

}




def execute(){
    withCredentials([usernamePassword(credentialsId: credentials, passwordVariable: &apos;PASS&apos;, usernameVariable: &apos;USER&apos;)]) {
        sh&quot;&quot;&quot;
            sshpass -p ${PASS} scp -p script.py ${USER}@${host}:/home/hidraxos/Escritorio
        &quot;&quot;&quot;
        sh&quot;&quot;&quot;
            sshpass -p ${PASS} ssh ${USER}@${host} &quot;cd /home/hidraxos/Escritorio &amp;&amp; /home/hidraxos/Oracle/Middleware/Oracle_Home/oracle_common/common/bin/wlst.sh script.py&quot;
        &quot;&quot;&quot;
    }
}

def deploy(def app, def artifactId, servers,ext){
    sh&quot;&quot;&quot;
        echo &quot;deploy(&apos;${app}&apos;,&apos;${artifactId}-${app}.${ext}&apos;,targets=&apos;${servers}&apos;)&quot; &gt;&gt; script.py
    &quot;&quot;&quot;
}

def getNexusVersion(name, repository,groupId,artifactId){
	String scriptVersion = scriptGetVersionsNexus(repository,groupId,artifactId)
	labelParameters.add([$class: &apos;ChoiceParameter&apos;, choiceType: &apos;PT_SINGLE_SELECT&apos;, description: &apos;&apos; , filterLength: 1, filterable: true, name: name, randomName: name, script: [$class: &apos;GroovyScript&apos;, fallbackScript: [classpath: [], sandbox: false, script: &apos;&apos;], script: [classpath: [], sandbox: false, script: scriptVersion]]])	
}

def downloadsComponents(artifacId, version, ext){
	sh &quot;&quot;&quot;
        curl -X GET -u ${USER}:${PASS} ${ipNexus}/repository/${repository}/${groupId}/${artifactId}/${version}/${artifactId}-${version}.${ext} -O
    &quot;&quot;&quot;
}

String scriptGetVersionsNexus(String repository,String groupId,String artifactId){

String script =&quot;&quot;&quot;
import groovy.json.JsonSlurper
import groovy.transform.Field
import jenkins.model.*
@Field def token=&quot;&quot;
@Field def nexusResponse = [:]
def responseList = []
responseList.add(&apos;ZERO_00&apos;)
while(token!=null){
    request()
  for(int i=0; i &lt; nexusResponse.items.size();i++){
        if(nexusResponse.items[i].group.toString().equals(&apos;${groupId}&apos;)){
              responseList.add(nexusResponse.items[i].version.toString())  
             
        }
     }
        
}
    return responseList.sort()
def request(){
    if(token==&quot;&quot;){
        urlNexusArtifactory = &quot;${ipNexus}/service/rest/v1/search?sort=&amp;repository=${repository}&amp;name=${artifactId}&quot;
    }else{
        urlNexusArtifactory = &quot;${ipNexus}/service/rest/v1/search?continuationToken=&quot;+token+&quot;&amp;sort=&amp;repository=${repository}&amp;name=${artifactId}&quot;
    }
    try {
		 credentialsId = &apos;${credentialsNexus}&apos;
        def creds = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
        com.cloudbees.plugins.credentials.common.StandardUsernameCredentials.class, Jenkins.instance, null, null ).find{
        it.id == credentialsId}
        String userpass = creds.username.toString() + &apos;:&apos; + creds.password.toString();
        String basicAuth = &quot;Basic &quot; + new String(Base64.getEncoder().encode(userpass.getBytes()));
        def http_client = new URL(urlNexusArtifactory).openConnection() as HttpURLConnection
        http_client.setRequestProperty(&quot;Authorization&quot;, basicAuth);
        http_client.setRequestMethod(&quot;GET&quot;);
        http_client.connect();
	  
        if (http_client.responseCode == 200) {
            nexusResponse = new JsonSlurper().parseText(http_client.inputStream.getText(\&apos;UTF-8\&apos;))
        } else {
            println(&quot;HTTP response error&quot;)
            System.exit(0)
        }
        if(nexusResponse.continuationToken==&quot;null&quot;){
            token=&quot;null&quot;
           
        }else{
            token=nexusResponse.continuationToken
        }
    }catch (Exception e) {
        println(e)
    }
}&quot;&quot;&quot;
return script
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>