<?xml version='1.1' encoding='UTF-8'?>
<flow-build plugin="workflow-job@1182.v60a_e6279b_579">
  <actions>
    <hudson.model.ParametersAction>
      <safeParameters class="sorted-set"/>
      <parameters>
        <hudson.model.BooleanParameterValue>
          <name>Refresh_Parameters</name>
          <description>Opcional</description>
          <value>true</value>
        </hudson.model.BooleanParameterValue>
        <hudson.model.BooleanParameterValue>
          <name>BACKUP</name>
          <description>Script de backup</description>
          <value>false</value>
        </hudson.model.BooleanParameterValue>
        <hudson.model.BooleanParameterValue>
          <name>EXECUTE</name>
          <description>Script de Ejecucion</description>
          <value>false</value>
        </hudson.model.BooleanParameterValue>
        <hudson.model.BooleanParameterValue>
          <name>REVERSE</name>
          <description>Script de Reverso</description>
          <value>false</value>
        </hudson.model.BooleanParameterValue>
        <hudson.model.BooleanParameterValue>
          <name>validarLogsPostEjecuciones</name>
          <description>多Validar logs despues de todas las ejecuciones?</description>
          <value>false</value>
        </hudson.model.BooleanParameterValue>
        <hudson.model.StringParameterValue>
          <name>COMMIT</name>
          <description>COMMIT GIT ${urlRepo}</description>
          <value></value>
        </hudson.model.StringParameterValue>
        <hudson.model.StringParameterValue>
          <name>INDEX</name>
          <description>	多script especifico o inicio de secuencia?</description>
          <value></value>
        </hudson.model.StringParameterValue>
        <hudson.model.BooleanParameterValue>
          <name>SECUENCIAL</name>
          <value>false</value>
        </hudson.model.BooleanParameterValue>
      </parameters>
      <parameterDefinitionNames>
        <string>Refresh_Parameters</string>
        <string>BACKUP</string>
        <string>EXECUTE</string>
        <string>REVERSE</string>
        <string>validarLogsPostEjecuciones</string>
        <string>COMMIT</string>
        <string>INDEX</string>
        <string>SECUENCIAL</string>
      </parameterDefinitionNames>
    </hudson.model.ParametersAction>
    <hudson.model.CauseAction>
      <causeBag class="linked-hash-map">
        <entry>
          <hudson.model.Cause_-UserIdCause>
            <userId>hidraxos</userId>
          </hudson.model.Cause_-UserIdCause>
          <int>1</int>
        </entry>
      </causeBag>
    </hudson.model.CauseAction>
    <org.jenkinsci.plugins.workflow.libs.LibrariesAction plugin="pipeline-groovy-lib@591.v3a_7f422b_d058">
      <libraries/>
    </org.jenkinsci.plugins.workflow.libs.LibrariesAction>
    <hudson.plugins.ansicolor.action.ColorizedAction plugin="ansicolor@1.0.1">
      <id>4d410290-011a-4efd-bf80-92c3c5ff692c</id>
      <colorMapName>xterm</colorMapName>
      <command>START</command>
    </hudson.plugins.ansicolor.action.ColorizedAction>
    <hudson.plugins.ansicolor.action.ColorizedAction plugin="ansicolor@1.0.1">
      <id>8627b626-5dd5-47ee-9dda-ebc0ec7bc7f8</id>
      <colorMapName>xterm</colorMapName>
      <command>CURRENT</command>
    </hudson.plugins.ansicolor.action.ColorizedAction>
    <hudson.plugins.ansicolor.action.ColorizedAction plugin="ansicolor@1.0.1">
      <id>7f5d028e-6ab9-412e-889f-5e91d8c221e1</id>
      <colorMapName>xterm</colorMapName>
      <command>STOP</command>
    </hudson.plugins.ansicolor.action.ColorizedAction>
    <hudson.plugins.ansicolor.action.ColorizedAction plugin="ansicolor@1.0.1">
      <id>574e10ed-9888-4c8e-aace-a4e7d7d034a5</id>
      <colorMapName>xterm</colorMapName>
      <command>START</command>
    </hudson.plugins.ansicolor.action.ColorizedAction>
    <hudson.plugins.ansicolor.action.ColorizedAction plugin="ansicolor@1.0.1">
      <id>414bdf53-407b-42db-aef3-fd61590399e0</id>
      <colorMapName>xterm</colorMapName>
      <command>CURRENT</command>
    </hudson.plugins.ansicolor.action.ColorizedAction>
    <hudson.plugins.ansicolor.action.ColorizedAction plugin="ansicolor@1.0.1">
      <id>5f212545-1302-474e-b50e-57e9e4598837</id>
      <colorMapName>xterm</colorMapName>
      <command>STOP</command>
    </hudson.plugins.ansicolor.action.ColorizedAction>
    <hudson.plugins.ansicolor.action.ColorizedAction plugin="ansicolor@1.0.1">
      <id>59131a58-6c4a-42cc-b541-53bd8a3dfdcf</id>
      <colorMapName>xterm</colorMapName>
      <command>START</command>
    </hudson.plugins.ansicolor.action.ColorizedAction>
    <hudson.plugins.ansicolor.action.ColorizedAction plugin="ansicolor@1.0.1">
      <id>e44a8c5b-741d-4200-8daf-c66b63974e25</id>
      <colorMapName>xterm</colorMapName>
      <command>CURRENT</command>
    </hudson.plugins.ansicolor.action.ColorizedAction>
    <hudson.plugins.ansicolor.action.ColorizedAction plugin="ansicolor@1.0.1">
      <id>828abf58-433d-4c95-b3c9-a6cc70c1cc2b</id>
      <colorMapName>xterm</colorMapName>
      <command>STOP</command>
    </hudson.plugins.ansicolor.action.ColorizedAction>
    <hudson.plugins.ansicolor.action.ColorizedAction plugin="ansicolor@1.0.1">
      <id>e013666e-b09d-4aab-ba93-2e0187d3b2a3</id>
      <colorMapName>xterm</colorMapName>
      <command>START</command>
    </hudson.plugins.ansicolor.action.ColorizedAction>
    <hudson.plugins.ansicolor.action.ColorizedAction plugin="ansicolor@1.0.1">
      <id>894a7548-ab5c-4546-963f-9cf2ff386bae</id>
      <colorMapName>xterm</colorMapName>
      <command>CURRENT</command>
    </hudson.plugins.ansicolor.action.ColorizedAction>
    <hudson.plugins.ansicolor.action.ColorizedAction plugin="ansicolor@1.0.1">
      <id>52cc9d81-6fe5-4116-b4a2-30013256ec80</id>
      <colorMapName>xterm</colorMapName>
      <command>STOP</command>
    </hudson.plugins.ansicolor.action.ColorizedAction>
    <hudson.plugins.ansicolor.action.ColorizedAction plugin="ansicolor@1.0.1">
      <id>bb9de77a-ddde-46a9-a9b1-565876e5cf52</id>
      <colorMapName>xterm</colorMapName>
      <command>START</command>
    </hudson.plugins.ansicolor.action.ColorizedAction>
    <hudson.plugins.ansicolor.action.ColorizedAction plugin="ansicolor@1.0.1">
      <id>1d164ea3-20ea-4e7e-97eb-a8a717c5255b</id>
      <colorMapName>xterm</colorMapName>
      <command>CURRENT</command>
    </hudson.plugins.ansicolor.action.ColorizedAction>
    <hudson.plugins.ansicolor.action.ColorizedAction plugin="ansicolor@1.0.1">
      <id>07c7f271-7145-48ce-aeae-586e6b3f75c6</id>
      <colorMapName>xterm</colorMapName>
      <command>STOP</command>
    </hudson.plugins.ansicolor.action.ColorizedAction>
  </actions>
  <queueId>12</queueId>
  <timestamp>1654532947174</timestamp>
  <startTime>1654532947201</startTime>
  <result>SUCCESS</result>
  <duration>1118</duration>
  <charset>UTF-8</charset>
  <keepLog>false</keepLog>
  <execution class="org.jenkinsci.plugins.workflow.cps.CpsFlowExecution">
    <result>SUCCESS</result>
    <script>import groovy.transform.Field
import java.io.*;
import java.text.SimpleDateFormat;

//Variables Nexus
@Field defaultRepository = &apos;jenkins-releases&apos;
@Field defaultExtension = &apos;zip&apos;
@Field groupId = &apos;oracle-DB&apos;
@Field credentialsNexus = &apos;nexusAdmin&apos;
@Field ipNexus = &apos;http://192.168.1.110:8081&apos;
//Variables git
@Field creditialsGit = &apos;ugithub&apos;
@Field urlRepo = &apos;https://github.com/hidraxos/jenkins_check.git&apos;
//Variables logica
@Field labelParameters = []
@Field scriptName = &quot;&quot;
@Field listVersiones=[]
@Field BANK = &apos;mine&apos;
@Field listaLogs = []
@Field credentialsOracle
@Field def date = new Date()

@Field def yellow = &quot;43&quot;; @Field def green = &quot;42&quot;; @Field def red = &apos;41&apos;; @Field def blue = &apos;46&apos;


node(&apos;master&apos;){

    labelParameters.add([$class: &apos;BooleanParameterDefinition&apos;, defaultValue: false, description: &apos;Opcional&apos;, name: &apos;Refresh_Parameters&apos;])
    labelParameters.add([$class: &apos;BooleanParameterDefinition&apos;, defaultValue: false, description: &apos;Script de backup&apos;, name: &apos;BACKUP&apos;])
    labelParameters.add([$class: &apos;BooleanParameterDefinition&apos;, defaultValue: false, description: &apos;Script de Ejecucion&apos;, name: &apos;EXECUTE&apos;])
    labelParameters.add([$class: &apos;BooleanParameterDefinition&apos;, defaultValue: false, description: &apos;Script de Reverso&apos;, name: &apos;REVERSE&apos;])
    labelParameters.add([$class: &apos;BooleanParameterDefinition&apos;, defaultValue: false, description: &apos;多Validar logs despues de todas las ejecuciones?&apos;, name: &apos;validarLogsPostEjecuciones&apos;])
	labelParameters.add(string(defaultValue: &apos;&apos;, description: &apos;COMMIT GIT ${urlRepo}&apos;, name: &apos;COMMIT&apos;, trim: false))		
	labelParameters.add(string(defaultValue: &apos;&apos;, description: &apos;	多script especifico o inicio de secuencia?&apos;, name: &apos;INDEX&apos;, trim: false))
    labelParameters.add([$class: &apos;BooleanParameterDefinition&apos;, defaultValue: false, description: &apos;&apos;, name: &apos;SECUENCIAL&apos;])
    properties(
        [parameters(
            labelParameters
        )]
    )
    stage(&apos;Git&apos;){
        if(params.&apos;Refresh_Parameters&apos;==false){
            cleanWs()
            if(params.&apos;BACKUP&apos; == false &amp;&amp; params.&apos;EXECUTE&apos; == false &amp;&amp; params.&apos;REVERSE&apos; == false){
		    	error(&quot;[ERROR] No Se selecciono componente de ejecucion.&quot;)
			}
			if(params.&apos;COMMIT&apos; == &quot;&quot;){
				error(&quot;[ERROR] No Se ingreso COMMIT de FILE GITHUB.&quot;)
			}
            checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/master&apos;]], extensions: [], userRemoteConfigs: [[url: &apos;https://github.com/hidraxos/jenkins_check.git&apos;]]])
            def lines = readFile(&apos;sql_prueba.txt&apos;).readLines()
            if(params.&apos;INDEX&apos; == &quot;&quot;){
                for(VERSIONES in lines){
                    listVersiones.add(VERSIONES)
                }
            }else if(params.&apos;INDEX&apos;!=&quot;&quot; &amp;&amp; params.&apos;SECUENCIAL&apos;==false){
                for(version in lines){
                    def (valor1, valor2, valor3) = VERSIONES.tokenize( &apos;#&apos; )
                    if(valor1 == params.&apos;INDEX&apos;){
                        listVersiones.add(VERSIONES)
                    }
                }
            }else if(params.&apos;INDEX&apos; != &quot;&quot; &amp;&amp; params.&apos;SECUENCIAL&apos; == true){
				def contador = 1
				for(String VERSIONES in lines){
					def (valor1, valor2, valor3) = VERSIONES.tokenize( &apos;#&apos; )
					if(params.&apos;INDEX&apos; == valor1){
						contador = 2
					}
					if(contador == 2){
						listaVersiones.add(VERSIONES)
					}
				}
            }else{
                printm(&quot;No se encontro archivo de versiones en GitHub&quot;,red)
                error(&quot;File Not Found&quot;)
            }
        }else{
            printm(&quot;Refresh Parameters....&quot;,blue)
        }
    }
    stage(&apos;nexus&apos;){
        if(params.&apos;Refresh_Parameters&apos;==false){
            for(version in listVersiones){
                def (valor1, valor2, valor3) = version.tokenize( &apos;#&apos; )
                repoFin(valor3)
                descarga(valor1 ,artifactId)
            }
        }else{
            printm(&quot;Refresh Parameters....&quot;,blue)
        }
    }
    stage(&apos;Descomprimido&apos;){
        if(params.&apos;Refresh_Parameters&apos;==false){
            for(version in listVersiones){
                def (valor1, valor2, valor3) = version.tokenize( &apos;#&apos; )
                repoFin(valor3)
                descomprimido(valor1)
            }
        }else{
            printm(&quot;Refresh Parameters....&quot;,blue)
        }
    }
    stage(&apos;Validacione Scripts&apos;){
        if(params.&apos;Refresh_Parameters&apos;==false){
            for(def version in listaVersiones){
                def (valor1, valor2, valor3) = version.tokenize( &apos;#&apos; )
			    defineEntorno(valor2)
                if(valor2 == &quot;TX&quot;){
					scriptExecute = &apos;migrate.sql&apos;
					scriptExecuteH = &apos;reverse.sql&apos;
                    scriptExecuteB = &apos;backup.sql&apos;
                }else if(valor2 == &quot;HIST&quot;){
					scriptExecute = &apos;migrate.sql&apos;
					scriptExecuteH = &apos;reverse.sql&apos;
                    scriptExecuteB = &apos;backup.sql&apos;
				}
                if(BACKUP == &quot;true&quot;){
					finallScript = &apos;${valor1}/migration/${scriptExecute}&apos;
					CRITICAlANALYSYS(finallScript)
				}
				if(EXECUTE == &quot;true&quot;){
					finallScript = &apos;${valor1}/migration/${scriptExecuteB}&apos;
					CRITICAlANALYSYS(finallScript)
				}
				if(REVERSE == &quot;true&quot;){
					finallScript = &apos;${valor1}/migration/${scriptExecuteH}&apos;
					CRITICAlANALYSYS(finallScript)
				}
            }
        }else{
            printm(&quot;Refresh Parameters....&quot;,blue)
        }
    }
    stage(&apos;Ejecutar&apos;){
        if(params.&apos;Refresh_Parameters&apos;==false){
            def folder
            def script
            for(version in listVersiones){
                def (valor1, valor2, valor3) = version.tokenize( &apos;#&apos; )
			    defineEntorno(valor2)
                if(valor2 == &quot;TX&quot;){
					scriptExecute = &apos;migrate.sql&apos;
					scriptExecuteH = &apos;reverse.sql&apos;
                    scriptExecuteB = &apos;backup.sql&apos;
                }else if(valor2 == &quot;HIST&quot;){
					scriptExecute = &apos;migrate.sql&apos;
					scriptExecuteH = &apos;reverse.sql&apos;
                    scriptExecuteB = &apos;backup.sql&apos;
				}
                if(params.&apos;BACKUP&apos;){
                    folder = &quot;${version}/migration/${version}&quot;
                    script = scriptExecuteB
                    if(fileExists(folder+&apos;/&apos;+script)){
                        SQL(folder,script)
                        if(params.&apos;validarLogsPostEjecuciones&apos; == true){
							listaLogs.add(folder+&apos;/&apos;+scriptName)
						}
                    }else{
                        printm (&quot;No se encuentra script de backup&quot;,yellow)
                    }
                }
                if(params.&apos;EXECUTE&apos;){
                    folder = &quot;${version}/migration/${version}&quot;
                    script = scriptExecute
                    SQL(folder,script)
                    if(params.&apos;validarLogsPostEjecuciones&apos; == true){
						listaLogs.add(folder+&apos;/&apos;+scriptName)
					}
                }
                if(params.&apos;REVERSE&apos;){
                    folder = &quot;${version}/reverse&quot;
                    script = scriptExecuteH
                    SQL(folder,script)
                    if(params.&apos;validarLogsPostEjecuciones&apos; == true){
						listaLogs.add(folder+&apos;/&apos;+scriptName)
					}
                }
            }
            if(validarLogsPostEjecuciones == &quot;true&quot;){
				for(log in listaLogs){
					AnalisisLogs(log)
				}
			}
        }else{
            printm(&quot;Refresh Parameters....&quot;,blue)
        }
    }   
}
def descarga(version,artifactId){
    printm (&quot;Descarga de .tar.gz Nexus&quot;,blue)
    withCredentials([usernamePassword(credentialsId: credentials, passwordVariable: &apos;PASS&apos;, usernameVariable:&apos;USERNAME&apos;)]){
        sh&quot;curl -X GET -u ${USERNAME}:${PASS} ${ipNexus}/repository/${defaultRepository}/${groupId}/${artifactId}/${version}/sql-releases-${version}.tar.gz -O&quot;
    }   
    printm (&quot;Descarga a Nexus EXITOSA&quot;,green)
}
def printm(message, color){
    ansiColor(&apos;xterm&apos;){
	    def	sdf = new SimpleDateFormat(&quot;M/d/yyyy HH:mm:ss&quot;)
        println &quot;\033[${color}m************ ${message} ************ ${sdf.format(date)}\033[0m&quot;
    }
}
def descomprimido(version){
    sh &quot;tar -xzvf sql-releases-${version}.tar.gz&quot;
}
def SQL(folder, scriptName){
	printm(&apos;[INFO] Realizando ejecucion de: &apos;+folder+&apos;/&apos;+scriptName+&apos;&apos;,&apos;46m&apos;)
	withCredentials([usernamePassword(credentialsId: credentialsOracle, usernameVariable: &apos;USERNAME&apos;, passwordVariable: &apos;PASSWORD&apos;)]) {

		sh &quot;&quot;&quot;cd ${folder} &amp;&amp; sqlplus64 &apos;${USERNAME}/${PASSWORD}@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(Host=${hostDB})(Port=${portDB}))(CONNECT_DATA=(SID=${sidDB})))&apos; @${scriptName}
		&quot;&quot;&quot;
	}						
}
def defEntorno(entorno){
    if(entorno ==&quot;TX&quot;){
        hostDB = &apos;192.168.1.110&apos;
        portDB = &apos;51521&apos;
        sidDB = &apos;XE&apos;
        credentialsOracle = &apos;oracleDB&apos;
    }else{
        printm(&quot;No selecciono entorno&quot;,red)
        error(&quot;Enviroment Not Selected&quot;)
    }

}
def CRITICAlANALYSYS(script){
    printm(&apos;[INFO] Ejecutandose analisis script: ${script}&apos;,blue)
    def DICC=[&quot;DROP&quot;]
    def file = readFile(script)
    for(palabra in DICC){
        if(file.contains(palabra)){
            printm(&quot;[ERROR] Se encontro la palabra ${palabra} en el script ${script}&quot;,red)
            error(&quot;${palabra} action not allowed&quot;)
        }else{
            printm(&quot;No se enocontraron palabras reservadas&quot;,green)
        }
    }
}
def AnalisisLogs(scriptName){
	printm(&apos;[INFO] Ejecutando analisis de log generado:&apos;+scriptName+&apos;&apos;,blue)
	def (exp_version) = scriptName.substring(13).tokenize( &apos;/&apos; )
	def ERRORES = [&quot;ORA-&quot;,&quot;SP2-&quot;]
	fileResult = scriptName+&apos;.log&apos;
	def readFileResult = readFile(fileResult).trim()
	for(def palabra in ERRORES){
		if(readFileResult.contains(palabra)){
			sh &quot;tar -rvf error.log.tar ${scriptName}.log&quot;
			NOTIFICATION(&quot;error.log.tar&quot;,&quot;FAILED&quot;, exp_version)
			error(&quot;[ERROR] Genero error el script: ${scriptName}&quot;)
		}	
	}
	sh &quot;tar -rvf LOGS-DB-B&quot;+BANK+&quot;-&quot;+exp_version+&quot;.tar ${scriptName}.log&quot;
	NOTIFICATION(&quot;LOGS-DB-B&quot;+BANK+&quot;-&quot;+exp_version+&quot;.tar&quot;,&quot;SUCCESS&quot;, exp_version)
}
def NOTIFICATION(logName, resultado, VERSION){
	def BODY
	if(resultado == &quot;FAILED&quot;){
		BODY = &apos;&apos;&apos;${SCRIPT, template=&quot;groovy-html.template&quot;}&apos;&apos;&apos;
	}else{
		
		BODY = &apos;&apos;&apos;${SCRIPT, template=&quot;groovy-html.template&quot;} Logs de Ejecucion: https://devops-nexus.ath.net/service/rest/repository/browse/&apos;&apos;&apos;+defaultRepository+&apos;&apos;&apos;/LOGS-DB/B&apos;&apos;&apos;+BANK+&apos;&apos;&apos;-PRD/&apos;&apos;&apos;+VERSION+&apos;&apos;&apos;-${BUILD_NUMBER}/&apos;&apos;&apos;
	}
    emailext attachLog: true, attachmentsPattern: &quot;${logName}&quot;, body:BODY, subject: &quot;${JOB_NAME} # ${BUILD_NUMBER} # ${resultado} B&quot;+BANK+&quot;-PRD&quot;, to: &quot;hidraxosjenkins@gmail.com&quot;	
}
def repoFin(repo){
    if(repo == &quot;solem&quot;){
        artifactId = &apos;sql-releases&apos;
    }else{
        printm(&quot;Solo se tiene el repo solem&quot;,blue)
        artifactId = &apos;sql-releases&apos;
    }
}</script>
    <loadedScripts class="map"/>
    <durabilityHint>MAX_SURVIVABILITY</durabilityHint>
    <timings class="concurrent-hash-map">
      <entry>
        <string>flowNode</string>
        <long>393956712</long>
      </entry>
      <entry>
        <string>classLoad</string>
        <long>79083701</long>
      </entry>
      <entry>
        <string>run</string>
        <long>948435543</long>
      </entry>
      <entry>
        <string>parse</string>
        <long>125062058</long>
      </entry>
      <entry>
        <string>saveProgram</string>
        <long>267014748</long>
      </entry>
    </timings>
    <sandbox>true</sandbox>
    <iota>53</iota>
    <head>1:53</head>
    <done>true</done>
    <resumeBlocked>false</resumeBlocked>
  </execution>
  <completed>true</completed>
  <checkouts class="hudson.util.PersistedList"/>
</flow-build>