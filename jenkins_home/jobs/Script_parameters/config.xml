<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1186.v8def1a_5f3944">
  <actions>
    <org.jenkinsci.plugins.workflow.multibranch.JobPropertyTrackerAction plugin="workflow-multibranch@716.vc692a_e52371b_">
      <jobPropertyDescriptors>
        <string>hudson.model.ParametersDefinitionProperty</string>
      </jobPropertyDescriptors>
    </org.jenkinsci.plugins.workflow.multibranch.JobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.BooleanParameterDefinition>
          <name>Herman</name>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>Carlos</name>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>Beatriz</name>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>Gladys</name>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Other</name>
          <defaultValue>Samuel</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2725.v7b_c717eb_12ce">
    <script>import groovy.transform.Field
import groovy.json.JsonSlurper
import java.io.IOException;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.io.*;
import org.w3c.dom.*;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.ParserConfigurationException;
import groovy.json.JsonSlurper
import java.text.SimpleDateFormat;


@Field def names = [
    &apos;Herman&apos;:[22,&apos;Colombia&apos;,&apos;Masculino&apos;,&apos;Ingeniero Software&apos;,&apos;bogota&apos;],
    &apos;Carlos&apos;:[25,&apos;Bolivia&apos;,&apos;Masculino&apos;,&apos;Ingeniero civil&apos;,&apos;La paz&apos;],
    &apos;Beatriz&apos;:[31,&apos;Colombia&apos;,&apos;Femenino&apos;,&apos;Sicologa&apos;,&apos;bogota&apos;],
    &apos;Gladys&apos;:[54,&apos;Colombia&apos;,&apos;Femenino&apos;,&apos;Ingeniera Industrial&apos;,&apos;bogota&apos;],
    &apos;Samuel&apos;:[15,&apos;Peru&apos;,&apos;Masculino&apos;,&apos;Futbolista&apos;,&apos;bogota&apos;]
    ]
    
    
node(&apos;ubuntu&apos;){
    properties([parameters([
            booleanParam(defaultValue: false, description: &apos;&apos;,name: &quot;Herman&quot;),
            booleanParam(defaultValue: false, description: &apos;&apos;,name: &quot;Carlos&quot;),
            booleanParam(defaultValue: false, description: &apos;&apos;,name: &quot;Beatriz&quot;),
            booleanParam(defaultValue: false, description: &apos;&apos;,name: &quot;Gladys&quot;),
            stringParam(defaultValue: &quot;Samuel&quot;,description: &apos;&apos;,name: &quot;Other&quot;)
        ])])
    stage(&apos;imprimir&apos;){
        println params.&quot;Other&quot;
        for(i in &apos;a&apos;..&apos;h&apos;){
            println i
        }
        def n = 0
        for(componente in names.keySet()){
            if(params.&quot;$componente&quot; == true){
                println &quot;Nombre: &quot;+componente + &quot;  Edad: &quot;+ names.values()[n][0]+ &quot;  Carrera: &quot;+ names.values()[n][3]
                //validateAge()
            }
            if(n == 4 &amp;&amp; params.&quot;Other&quot; == &apos;Samuel&apos;){
                println &quot;Nombre: &quot;+componente + &quot;  Edad: &quot;+ names.values()[n][0] + &quot;  Carrera: &quot;+ names.values()[n][3]
            }
            n++
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>