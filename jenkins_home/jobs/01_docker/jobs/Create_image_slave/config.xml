<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1186.v8def1a_5f3944">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2097.v33db_b_de764b_e"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2097.v33db_b_de764b_e">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>Dockerfile</string>
        <string>Version</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>Dockerfile</name>
          <description>Archivo dockerfile de la imagen a crear</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Version</name>
          <description>Versión de la imagen a crear</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2725.v7b_c717eb_12ce">
    <script>import groovy.transform.Field
import java.io.*;

@Field def urlGit = &apos;https://github.com/hidraxos/jenkins_check.git&apos;
@Field def credentials = &apos;ugithub&apos;
@Field def NexusCredentials = &apos;nexus_credentials&apos;
@Field def registry = &apos;172.25.0.3:8082&apos;


pipeline {
    agent any
    parameters{
        string(description: &apos;Archivo dockerfile de la imagen a crear&apos;, name: &apos;Dockerfile&apos;)
        string(description: &apos;Versión de la imagen a crear&apos;, name: &apos;Version&apos;)
    }

    stages {
        stage(&apos;git&apos;) {
            agent {label &apos;ubuntu&apos;}
            steps {
                checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/master&apos;]], extensions: [], userRemoteConfigs: [[credentialsId: credentials, url: urlGit]]])
                stash name: &apos;workspace&apos;
            }
        }

        stage(&apos;buildImage&apos;){
            agent {label &apos;CLOUD_AWS&apos;}
            steps{
                script{
                    cleanWs()
                    unstash &apos;workspace&apos;
                    createImages()
                }
            }
        }

        stage(&apos;registry_image&apos;){
            agent {label &apos;ubuntu&apos;}
            steps{
                script{
                    unstash &apos;image&apos;
                    registryImages()
                }
            }
        }
    }
    
}

def createImages(){
    def nameImage = params.&apos;Dockerfile&apos;.replaceAll(&quot;dockerfile&quot;,&quot;slave&quot;)
    sh &quot;&quot;&quot;
        docker build -t ${registry}/${nameImage}:${params.&apos;Version&apos;} -f ${params.&apos;Dockerfile&apos;} .
        docker images
        docker save -o ${nameImage}.tar ${registry}/${nameImage}:${params.&apos;Version&apos;}
    &quot;&quot;&quot;
    stash name: &apos;image&apos;

    //sh &quot;docker rmi -f ${registry}/${nameImage}:${params.&apos;Version&apos;}&quot;

    cleanWs()
}

def registryImages(){
    withCredentials([usernamePassword(credentialsId: &apos;nexus_registry&apos;, passwordVariable: &apos;PASSWORD&apos;, usernameVariable: &apos;USER&apos;)]) {
    def nameImage = params.&apos;Dockerfile&apos;.replaceAll(&quot;dockerfile&quot;,&quot;slave&quot;)
    sh &quot;&quot;&quot; 
        docker load -i ${nameImage}.tar
        docker images
        docker login -u ${USER} -p ${PASSWORD} ${registry}
        docker push ${registry}/${nameImage}:${params.&apos;Version&apos;}
        docker logout ${registry}
    &quot;&quot;&quot; 
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>