<?xml version='1.1' encoding='UTF-8'?>
<flow-build plugin="workflow-job@1167.v8fe861b_09ef9">
  <actions>
    <hudson.model.ParametersAction>
      <safeParameters class="sorted-set"/>
      <parameters>
        <hudson.model.BooleanParameterValue>
          <name>ELIMINAR_JOBS</name>
          <description>Seleccione si desea ELIMINAR LOS JOBS DESPUES DEL RESPALDO</description>
          <value>true</value>
        </hudson.model.BooleanParameterValue>
        <hudson.model.StringParameterValue>
          <name>Archivo</name>
          <description>Nombre del archivo en GitHub SIN EL .txt</description>
          <value>jobs</value>
        </hudson.model.StringParameterValue>
        <hudson.model.StringParameterValue>
          <name>Version</name>
          <description>Version del .tar para cargar a Nexus</description>
          <value>1.0</value>
        </hudson.model.StringParameterValue>
        <hudson.model.StringParameterValue>
          <name>Artefacto</name>
          <description>Nombre del  artefacto para cargar a Nexus</description>
          <value>Jobs_ICBS_vencidos</value>
        </hudson.model.StringParameterValue>
        <hudson.model.StringParameterValue>
          <name>Grupo</name>
          <description>GroupId para cargar a Nexus</description>
          <value>ICBS</value>
        </hudson.model.StringParameterValue>
      </parameters>
      <parameterDefinitionNames>
        <string>ELIMINAR_JOBS</string>
        <string>Archivo</string>
        <string>Version</string>
        <string>Artefacto</string>
        <string>Grupo</string>
      </parameterDefinitionNames>
    </hudson.model.ParametersAction>
    <hudson.model.CauseAction>
      <causeBag class="linked-hash-map">
        <entry>
          <hudson.model.Cause_-UserIdCause>
            <userId>hidraxos</userId>
          </hudson.model.Cause_-UserIdCause>
          <int>1</int>
        </entry>
      </causeBag>
    </hudson.model.CauseAction>
    <org.jenkinsci.plugins.workflow.libs.LibrariesAction plugin="workflow-cps-global-lib@564.ve62a_4eb_b_e039">
      <libraries/>
    </org.jenkinsci.plugins.workflow.libs.LibrariesAction>
    <hudson.plugins.git.util.BuildData plugin="git@4.10.3">
      <buildsByBranchName>
        <entry>
          <string>refs/remotes/origin/master</string>
          <hudson.plugins.git.util.Build>
            <marked plugin="git-client@3.11.0">
              <sha1>ed361d0a6aea8c12e9cdaacb5624b671394cbf83</sha1>
              <branches class="list">
                <hudson.plugins.git.Branch>
                  <sha1 reference="../../../sha1"/>
                  <name>refs/remotes/origin/master</name>
                </hudson.plugins.git.Branch>
              </branches>
            </marked>
            <revision reference="../marked"/>
            <hudsonBuildNumber>160</hudsonBuildNumber>
          </hudson.plugins.git.util.Build>
        </entry>
      </buildsByBranchName>
      <lastBuild reference="../buildsByBranchName/entry/hudson.plugins.git.util.Build"/>
      <remoteUrls>
        <string>https://github.com/hidraxos/jobs_vencidos</string>
      </remoteUrls>
    </hudson.plugins.git.util.BuildData>
    <org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState plugin="workflow-scm-step@2.13">
      <revisionStates>
        <entry>
          <string>git https://github.com/hidraxos/jobs_vencidos</string>
          <hudson.scm.SCMRevisionState_-None/>
        </entry>
      </revisionStates>
    </org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState>
    <com.cloudbees.plugins.credentials.builds.CredentialsParameterBinder plugin="credentials@1074.v60e6c29b_b_44b_">
      <boundCredentials class="concurrent-hash-map"/>
    </com.cloudbees.plugins.credentials.builds.CredentialsParameterBinder>
    <org.jenkinsci.plugins.workflow.cps.EnvActionImpl plugin="workflow-cps@2659.v52d3de6044d0">
      <env class="tree-map"/>
    </org.jenkinsci.plugins.workflow.cps.EnvActionImpl>
    <org.jenkinsci.plugins.workflow.cps.view.InterpolatedSecretsAction plugin="workflow-cps@2659.v52d3de6044d0">
      <interpolatedWarnings>
        <org.jenkinsci.plugins.workflow.cps.view.InterpolatedSecretsAction_-InterpolatedWarnings>
          <stepName>sh</stepName>
          <interpolatedVariables>
            <string>PASS</string>
          </interpolatedVariables>
        </org.jenkinsci.plugins.workflow.cps.view.InterpolatedSecretsAction_-InterpolatedWarnings>
      </interpolatedWarnings>
    </org.jenkinsci.plugins.workflow.cps.view.InterpolatedSecretsAction>
  </actions>
  <queueId>994</queueId>
  <timestamp>1646417373753</timestamp>
  <startTime>1646417373808</startTime>
  <result>SUCCESS</result>
  <duration>19654</duration>
  <charset>UTF-8</charset>
  <keepLog>false</keepLog>
  <execution class="org.jenkinsci.plugins.workflow.cps.CpsFlowExecution">
    <result>SUCCESS</result>
    <script>import groovy.transform.Field
import groovy.json.JsonSlurper
import java.io.IOException;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.io.*;
import org.w3c.dom.*;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.ParserConfigurationException;
import groovy.json.JsonSlurper
import java.text.SimpleDateFormat;
    
@Field def ruta = &quot;&quot;
@Field def existe
@Field def rango
@Field def credentials = &apos;nexusAdmin&apos;

node{
    cleanWs()
    properties([parameters([
        booleanParam(defaultValue: false, description: &apos;Seleccione si desea ELIMINAR LOS JOBS DESPUES DEL RESPALDO&apos;,name: &quot;ELIMINAR_JOBS&quot;),
        stringParam(defaultValue: &quot;&quot;, description: &apos;Nombre del archivo en GitHub SIN EL .txt&apos;,name: &quot;Archivo&quot;),
        stringParam(defaultValue: &quot;&quot;, description: &apos;Version del .tar para cargar a Nexus&apos;,name: &quot;Version&quot;),
        stringParam(defaultValue: &quot;&quot;, description: &apos;Nombre del  artefacto para cargar a Nexus&apos;,name: &quot;Artefacto&quot;),
        stringParam(defaultValue: &quot;&quot;, description: &apos;GroupId para cargar a Nexus&apos;,name: &quot;Grupo&quot;),
    ])])
    stage(&apos;check-folder-respaldos&apos;){
        validate(&quot;&quot;)
        if(existe == false){
            sh&quot;&quot;&quot;
                mkdir /home/jobs_respaldo
            &quot;&quot;&quot;
        }else{
            println &quot;El directorio /home/jobs_respaldos ya existe&quot;
        }
    }
    stage(&apos;Back_up_jobs&apos;){
        checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/master&apos;]], extensions: [], userRemoteConfigs: [[url: &apos;https://github.com/hidraxos/jobs_vencidos&apos;]]])
        def archivoJobs = (params.&quot;Archivo&quot;)+&quot;.txt&quot;
        def jobs = readFile(archivoJobs).readLines();
        if(!jobs.isEmpty()){
            println &quot;\033[43m############ Comenzando Respaldo de Jobs ############\033[0m&quot;
            respaldos(jobs)
            println &quot;\033[42m############ Respaldo de Jobs EXITOSO ############\033[0m&quot;
            println &quot;\033[43m############ Comenzando comprimido .tar.gz ############\033[0m&quot;
            comprimido()
            println &quot;\033[42m############ Comprimido EXITOSO ############\033[0m&quot;
            uploadNexus()
        }
    }
    stage(&apos;Eliminar Jobs&apos;){
        if(params.&quot;ELIMINAR_JOBS&quot;){
            def jobs = (params.&quot;Archivo&quot;)+&quot;.txt&quot;
            def eliminateJobs = readFile(jobs).readLines()
            println &quot;############  Se borraran los jobs ############&quot;
            eliminate(eliminateJobs)
        }
    }
}
def respaldos(def jobs){
    for(i in jobs){
        //println i
        if(i.contains(&apos;/&apos;)){
            def arreglo = i.tokenize(&apos;/&apos;)
            //println arreglo


            rango = []
            for(h in 0..(arreglo.size()-1)){
                rango.add(h)
            }


            for(e in rango){
                ruta = ruta + &quot;/&quot; +arreglo[e]
                //println ruta
                if(e != (arreglo.size()-1)){
                    validate(ruta)
                    if(existe == false){
                        sh&quot;&quot;&quot;
                            mkdir /home/jobs_respaldo${ruta}
                        &quot;&quot;&quot;
                    }
                    validate(ruta+&quot;/config.xml&quot;)
                    if(existe == false){
                        sh &quot;&quot;&quot;
                          cp  /var/jenkins_home/jobs${ruta}/config.xml /home/jobs_respaldo${ruta}
                        &quot;&quot;&quot;
                    }
                    ruta = ruta + &quot;/jobs&quot;
                    validate(ruta)
                    if(existe == false){
                        sh&quot;&quot;&quot;
                            mkdir /home/jobs_respaldo${ruta}
                        &quot;&quot;&quot;
                    }
                }else{
                    validate(ruta)
                    if(existe == false){
                        sh&quot;&quot;&quot;
                            mkdir /home/jobs_respaldo${ruta}
                        &quot;&quot;&quot;
                    }
                    validate(ruta+&quot;/config.xml&quot;)
                    if(existe == false){
                        sh &quot;&quot;&quot;
                          cp  /var/jenkins_home/jobs${ruta}/config.xml /home/jobs_respaldo${ruta}
                        &quot;&quot;&quot;
                    }
                }
            }
            ruta = &quot;&quot;
        }else{
            validate(i)
            if(existe == false){
                sh&quot;&quot;&quot;
                    mkdir /home/jobs_respaldo/${i}
                &quot;&quot;&quot;
            }
            validate(i+&quot;/config.xml&quot;)
            if(existe == false){
                sh &quot;&quot;&quot;
                  cp  /var/jenkins_home/jobs/${i}/config.xml /home/jobs_respaldo/${i}
                &quot;&quot;&quot;
            }
        }
    }
}

def validate(def ruta){
    File file = new File(&quot;/home/jobs_respaldo/&quot;+ruta)
    if(file.exists()){
        println &quot;${ruta} existe&quot;
        existe = true
    }else{
        println &quot;${ruta} NO existe&quot;
        existe = false
    }
}

def comprimido(){
    sh&quot;&quot;&quot;
        tar -czvf job_vencidos.tar.gz /home/jobs_respaldo
    &quot;&quot;&quot;
}

def uploadNexus(){
    withCredentials([usernamePassword(credentialsId: credentials, passwordVariable: &apos;PASS&apos;, usernameVariable:&apos;USERNAME&apos;)]){
        sh&quot;curl -v -u $USERNAME:$PASS -X POST http://192.168.1.110:8081/service/rest/v1/components?repository=Jobs_vencidos -F maven2.groupId=${params.&quot;Grupo&quot;} -F maven2.artifactId=${params.&quot;Artefacto&quot;} -F maven2.version=${params.&quot;Version&quot;} -F &apos;maven2.asset1=@/var/jenkins_home/workspace/jobs_vencidos/backup_jobs_vencidos/job_vencidos.tar.gz;type=application/x-tgz&apos; -F maven2.asset1.extension=tar.gz&quot;
    }   
}

def eliminate(def eliminateJobs){
    for(i in eliminateJobs){
        if(i.contains(&apos;/&apos;)){
            def arreglo = i.tokenize(&apos;/&apos;)
            def path = &quot;&quot;
            for(e in 0..(arreglo.size()-2)){
                path = path + arreglo[e]+&quot;/jobs/&quot;
            }
            path = path + &quot;/&quot;+arreglo[(arreglo.size()-1)]
            sh&quot;rm -rf /var/jenkins_home/jobs/${path}&quot;
            path = 0
        }else{
            sh &quot;rm -rf /var/jenkins_home/jobs/${i}&quot;
        }
    }
}</script>
    <loadedScripts class="map"/>
    <durabilityHint>MAX_SURVIVABILITY</durabilityHint>
    <timings class="map">
      <entry>
        <string>flowNode</string>
        <long>11117259111</long>
      </entry>
      <entry>
        <string>classLoad</string>
        <long>34525413</long>
      </entry>
      <entry>
        <string>run</string>
        <long>17061159586</long>
      </entry>
      <entry>
        <string>parse</string>
        <long>70413844</long>
      </entry>
      <entry>
        <string>saveProgram</string>
        <long>2213806414</long>
      </entry>
    </timings>
    <sandbox>false</sandbox>
    <iota>79</iota>
    <head>1:79</head>
    <done>true</done>
    <resumeBlocked>false</resumeBlocked>
  </execution>
  <completed>true</completed>
  <checkouts class="hudson.util.PersistedList">
    <org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
      <scm class="hudson.plugins.git.GitSCM" plugin="git@4.10.3">
        <configVersion>2</configVersion>
        <userRemoteConfigs>
          <hudson.plugins.git.UserRemoteConfig>
            <url>https://github.com/hidraxos/jobs_vencidos</url>
          </hudson.plugins.git.UserRemoteConfig>
        </userRemoteConfigs>
        <branches>
          <hudson.plugins.git.BranchSpec>
            <name>*/master</name>
          </hudson.plugins.git.BranchSpec>
        </branches>
        <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
        <submoduleCfg class="empty-list"/>
        <extensions/>
      </scm>
      <node></node>
      <workspace>/var/jenkins_home/workspace/jobs_vencidos/backup_jobs_vencidos</workspace>
      <changelogFile>/var/jenkins_home/jobs/jobs_vencidos/jobs/backup_jobs_vencidos/builds/160/changelog11759934233069155730.xml</changelogFile>
      <pollingBaseline class="hudson.scm.SCMRevisionState$None" reference="../../../actions/org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState/revisionStates/entry/hudson.scm.SCMRevisionState_-None"/>
    </org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
  </checkouts>
</flow-build>